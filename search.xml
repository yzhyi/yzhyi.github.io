<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMU15-445/645学习笔记</title>
    <url>/2024/11/14/CMU15-445-645%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CMU15-445-645"><a href="#CMU15-445-645" class="headerlink" title="CMU15-445&#x2F;645"></a>CMU15-445&#x2F;645</h1><hr>
<h2 id="src-common"><a href="#src-common" class="headerlink" title="src&#x2F;common."></a>src&#x2F;common.</h2><h3 id="channel-h"><a href="#channel-h" class="headerlink" title="channel.h"></a>channel.h</h3><ul>
<li>实际上是一个线程安全队列.</li>
</ul>
<h3 id="rid-h"><a href="#rid-h" class="headerlink" title="rid.h"></a>rid.h</h3><ul>
<li>Record Identifier &#x3D; page_id_ &lt;&lt; 32 | slot_num_</li>
</ul>
<h3 id="rwlatch-h"><a href="#rwlatch-h" class="headerlink" title="rwlatch.h"></a>rwlatch.h</h3><ul>
<li>读写锁(std::shared_mutex)</li>
</ul>
<hr>
<h2 id="src-type"><a href="#src-type" class="headerlink" title="src&#x2F;type."></a>src&#x2F;type.</h2><h3 id="abstract-pool-h"><a href="#abstract-pool-h" class="headerlink" title="abstract_pool.h"></a>abstract_pool.h</h3><ul>
<li>抽象内存池接口</li>
</ul>
<h3 id="type-id-h"><a href="#type-id-h" class="headerlink" title="type_id.h"></a>type_id.h</h3><ul>
<li>type枚举   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TypeId</span> &#123; INVALID = <span class="number">0</span>, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="type-h"><a href="#type-h" class="headerlink" title="type.h"></a>type.h</h3><ul>
<li>类型基类.</li>
<li>定义了类型比较,运算,序列化,转换类型等虚接口.</li>
</ul>
<h4 id="boolean-type-h"><a href="#boolean-type-h" class="headerlink" title="boolean_type.h"></a>boolean_type.h</h4><ul>
<li>实例化boolean类型比较,运算,序列化,转换类型等接口.</li>
</ul>
<h4 id="numeraic-type-h"><a href="#numeraic-type-h" class="headerlink" title="numeraic_type.h"></a>numeraic_type.h</h4><ul>
<li>number value的基类,可以是整数和小数.必须提供运算操作.</li>
</ul>
<h4 id="integer-parent-type-h"><a href="#integer-parent-type-h" class="headerlink" title="integer_parent_type.h"></a>integer_parent_type.h</h4><ul>
<li>为整数提供具有鲁棒性的四则运算.</li>
</ul>
<h4 id="tinyint-type-h-smallint-type-h-bigint-type-hinteger-type-h"><a href="#tinyint-type-h-smallint-type-h-bigint-type-hinteger-type-h" class="headerlink" title="tinyint_type.h,smallint_type.h,bigint_type.hinteger_type.h"></a>tinyint_type.h,smallint_type.h,bigint_type.hinteger_type.h</h4><ul>
<li>integer_parent_type的子类,为整数提供了比较,运算,序列化,转换类型等接口.</li>
</ul>
<h4 id="timestamp-type-h"><a href="#timestamp-type-h" class="headerlink" title="timestamp_type.h"></a>timestamp_type.h</h4><ul>
<li>为timestamp类型提供比较等接口.</li>
</ul>
<h4 id="decimal-type-h"><a href="#decimal-type-h" class="headerlink" title="decimal_type.h"></a>decimal_type.h</h4><ul>
<li>为小数提供类型比较,运算,序列化,转换类型等接口.</li>
</ul>
<h3 id="value-h"><a href="#value-h" class="headerlink" title="value.h"></a>value.h</h3><ul>
<li>实际管理数据内容的地方.</li>
<li>存储着type和数据内容.</li>
<li>value比较,运算,序列化,转换类型等操作都是调用type提供的虚接口.  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Type::<span class="built_in">GetInstance</span>(type_id_)-&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="value-factory-h"><a href="#value-factory-h" class="headerlink" title="value_factory.h"></a>value_factory.h</h3><ul>
<li>value工厂类,方便构造value.</li>
</ul>
<hr>
<h2 id="src-catalog"><a href="#src-catalog" class="headerlink" title="src&#x2F;catalog."></a>src&#x2F;catalog.</h2><h3 id="column-h"><a href="#column-h" class="headerlink" title="column.h"></a>column.h</h3><ul>
<li>记录column的name,type,fixed_length,variable_length,offset.</li>
</ul>
<h3 id="schema-h"><a href="#schema-h" class="headerlink" title="schema.h"></a>schema.h</h3><ul>
<li>存储着std::vector<Column> columns. 记录数据库tuple的元信息.</li>
</ul>
<h3 id="catalog-h"><a href="#catalog-h" class="headerlink" title="catalog.h"></a>catalog.h</h3><ul>
<li>处理表创建、表查找、索引创建和索引查找.</li>
</ul>
<hr>
<h2 id="src-storage"><a href="#src-storage" class="headerlink" title="src&#x2F;storage."></a>src&#x2F;storage.</h2><h3 id="table-tuple-h"><a href="#table-tuple-h" class="headerlink" title="table&#x2F;tuple.h"></a>table&#x2F;tuple.h</h3><ul>
<li>存储RID rid_{},std::vector<char> data_.</li>
<li>定义了tuple的存储格式,前面部分存储inline数据,然后存储uninline数据.</li>
<li>可以通过schema和column_idx得到数据.</li>
</ul>
<h3 id="table-table-heap-h"><a href="#table-table-heap-h" class="headerlink" title="table&#x2F;table_heap.h"></a>table&#x2F;table_heap.h</h3><ul>
<li>BufferPoolManager *bpm_,page_id_t first_page_id_,page_id_t last_page_id_.</li>
<li>通过BufferPoolManager操作table,提供了一系列操作table中tuple的接口.</li>
</ul>
<h3 id="table-table-iterator-h"><a href="#table-table-iterator-h" class="headerlink" title="table&#x2F;table_iterator.h"></a>table&#x2F;table_iterator.h</h3><ul>
<li>table中page的迭代器.</li>
</ul>
<h3 id="disk-disk-manager-h"><a href="#disk-disk-manager-h" class="headerlink" title="disk&#x2F;disk_manager.h"></a>disk&#x2F;disk_manager.h</h3><ul>
<li>封装了写文件操作.</li>
<li>file_name_,log_name_.</li>
<li>通过page_id计算offset,然后往文件读写内容.</li>
</ul>
<h3 id="disk-disk-scheduler-h"><a href="#disk-disk-scheduler-h" class="headerlink" title="disk&#x2F;disk_scheduler.h"></a>disk&#x2F;disk_scheduler.h</h3><ul>
<li>内部保存DiskManager.</li>
<li>Channel&lt;std::optional<DiskRequest>&gt; request_queue_,使用channel依次处理请求.</li>
</ul>
<h3 id="page-page-h"><a href="#page-page-h" class="headerlink" title="page&#x2F;page.h"></a>page&#x2F;page.h</h3><ul>
<li>数据库存储的基本单元.提供了对真实数据页的一层包装.</li>
<li>data_,page_id_,pin_count_,is_dirty_,rwlatch_.</li>
</ul>
<h3 id="page-page-guard-h"><a href="#page-page-guard-h" class="headerlink" title="page&#x2F;page_guard.h"></a>page&#x2F;page_guard.h</h3><ul>
<li>为page提供RAII.</li>
</ul>
<h3 id="page-table-page-h"><a href="#page-table-page-h" class="headerlink" title="page&#x2F;table_page.h"></a>page&#x2F;table_page.h</h3><ul>
<li>一个page是怎么存储tuple的.</li>
</ul>
<h3 id="page-extendible-htable-header-page-h"><a href="#page-extendible-htable-header-page-h" class="headerlink" title="page&#x2F;extendible_htable_header_page.h"></a>page&#x2F;extendible_htable_header_page.h</h3><ul>
<li>page_id_t directory_page_ids_[512],uint32_t max_depth_;</li>
<li>固定大小,可以认为是第一层hash,有一个常量max_depth_.</li>
</ul>
<h3 id="page-extendible-htable-directory-page-h"><a href="#page-extendible-htable-directory-page-h" class="headerlink" title="page&#x2F;extendible_htable_directory_page.h"></a>page&#x2F;extendible_htable_directory_page.h</h3><ul>
<li>uint32_t max_depth_,uint32_t global_depth_,uint8_t local_depths_[512],page_id_t bucket_page_ids_[512];</li>
<li>不固定大小,可以认为是第二层hash,有一个变量depth.</li>
</ul>
<h3 id="page-extendible-htable-bucket-page-h"><a href="#page-extendible-htable-bucket-page-h" class="headerlink" title="page&#x2F;extendible_htable_bucket_page.h"></a>page&#x2F;extendible_htable_bucket_page.h</h3><ul>
<li>uint32_t size_,uint32_t max_size_,MappingType array_[HTableBucketArraySize(sizeof(MappingType))];</li>
<li>保存实际value的地方.</li>
</ul>
<h3 id="index-index-h"><a href="#index-index-h" class="headerlink" title="index&#x2F;index.h"></a>index&#x2F;index.h</h3><ul>
<li>std::unique_ptr<IndexMetadata> metadata_;</li>
<li>IndexMetadata  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The name of the index */</span></span><br><span class="line">std::string name_;</span><br><span class="line"><span class="comment">/** The name of the table on which the index is created */</span></span><br><span class="line">std::string table_name_;</span><br><span class="line"><span class="comment">/** The mapping relation between key schema and tuple schema */</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">uint32_t</span>&gt; key_attrs_;</span><br><span class="line"><span class="comment">/** The schema of the indexed key */</span></span><br><span class="line">std::shared_ptr&lt;Schema&gt; key_schema_;</span><br><span class="line"><span class="comment">/** Is primary key? */</span></span><br><span class="line"><span class="type">bool</span> is_primary_key_;</span><br></pre></td></tr></table></figure></li>
<li>索引的抽象基类.</li>
</ul>
<h3 id="index-extendible-hash-table-index-h"><a href="#index-extendible-hash-table-index-h" class="headerlink" title="index&#x2F;extendible_hash_table_index.h"></a>index&#x2F;extendible_hash_table_index.h</h3><ul>
<li>class ExtendibleHashTableIndex : public Index;</li>
<li>根据extendible_hash_table构建的索引表.</li>
</ul>
<hr>
<h2 id="src-buffer"><a href="#src-buffer" class="headerlink" title="src&#x2F;buffer."></a>src&#x2F;buffer.</h2><h3 id="lru-k-replacer-h"><a href="#lru-k-replacer-h" class="headerlink" title="lru_k_replacer.h"></a>lru_k_replacer.h</h3><ul>
<li>实现了lru_k替换算法.</li>
</ul>
<h3 id="buffer-pool-manager-h"><a href="#buffer-pool-manager-h" class="headerlink" title="buffer_pool_manager.h"></a>buffer_pool_manager.h</h3><ul>
<li>缓存池.通过pool_size,disk_manager(file_name_),replacer_k初始化.</li>
</ul>
<hr>
<h2 id="src-container"><a href="#src-container" class="headerlink" title="src&#x2F;container."></a>src&#x2F;container.</h2><h3 id="disk-hash-disk-extendible-hash-table-h"><a href="#disk-hash-disk-extendible-hash-table-h" class="headerlink" title="disk&#x2F;hash&#x2F;disk_extendible_hash_table.h"></a>disk&#x2F;hash&#x2F;disk_extendible_hash_table.h</h3><ul>
<li>std::string index_name_;BufferPoolManager *bpm_;KC cmp_;HashFunction<K> hash_fn_;uint32_t header_max_depth_;uint32_t directory_max_depth_;uint32_t bucket_max_size_;page_id_t header_page_id_;</li>
<li>结合BufferPoolManager,extendible_htable_header_page,extendible_htable_directory_page,extendible_htable_bucket_page,建立一个可动态扩展&#x2F;收缩的HashTable，对外提供增、删、查的的服务接口.</li>
</ul>
<hr>
<h2 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h2><h3 id="executors-abstract-executor-h"><a href="#executors-abstract-executor-h" class="headerlink" title="executors&#x2F;abstract_executor.h"></a>executors&#x2F;abstract_executor.h</h3><ul>
<li>执行器的抽象基类.</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>GDB基础操作</title>
    <url>/2024/11/22/GDB%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><ul>
<li>l: 看当前行上下文&#x2F; l func 看func上下文</li>
<li>p: 打印变量&#x2F;调用函数. p $寄存器名</li>
<li>bt: 打印栈回溯</li>
<li>f stack_id: 切换栈(只是能打印该栈的信息,并不会重新执行指令)</li>
<li>b: 打断点(b main.cc:5)&#x2F;(b func有函数重载时会给多个函数下断点, b func(int)只会在这个函数打断点)&#x2F;(b func if 表达式)</li>
<li>i b: 查看断点(info break); d num: 删除断点</li>
<li>tb:创建临时断点</li>
<li>s: 进入函数</li>
<li>n: 下一步</li>
<li>si：执行下一条机器指令。</li>
<li>ni：执行下一条机器指令，但不进入函数内部</li>
<li>c: 继续运行</li>
<li>watch 变量名&#x2F;if 变量名 &#x3D;&#x3D; ？(写入时打断)</li>
<li>rwatch 变量名&#x2F;if 变量名 &#x3D;&#x3D; ？(读取时打断)</li>
<li>awatch (写入和读取都会打断点)</li>
<li>tui enable&#x2F;layout src</li>
<li>layout asm&#x2F;src</li>
<li>r 参数(表示传入main的参数argc, argv)</li>
<li>finish: 继续执行程序，直到当前函数完成并返回到它的调用者</li>
</ul>
<hr>
<h2 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h2><ul>
<li>info threads: 查看线程信息</li>
<li>t thread_id: 切换线程</li>
<li>正常情况下多个线程会一起执行,不会因为在一个线程打了断点,另一个线程就不执行了</li>
</ul>
<h3 id="调度器锁模式"><a href="#调度器锁模式" class="headerlink" title="调度器锁模式"></a>调度器锁模式</h3><ul>
<li>理解调度器锁模式<ol>
<li>set scheduler-locking off: 不锁定任何线程,所有线程可以继续执行.</li>
<li>set scheduler-locking on: 只有当前线程可以执行,其他线程暂停运行.</li>
<li>set scheduler-locking step: 当单步执行某一线程时,保证在调试过程中当前线程不会发生改变.其他线程也会随着被调试线程的单步执行而执行;但如果该模式下执行continue,until,finish命令,则其他线程也会执行,并且如果某一线程执行过程中遇到断点,则GDB会将该线程作为当前线程.(只有线程创建后这个命令的暂停效果才有效)</li>
</ol>
</li>
<li>查看调度器锁模式:show scheduler-locking</li>
</ul>
<hr>
<h2 id="调试coredump文件"><a href="#调试coredump文件" class="headerlink" title="调试coredump文件"></a>调试coredump文件</h2><h3 id="什么是coredump文件"><a href="#什么是coredump文件" class="headerlink" title="什么是coredump文件?"></a>什么是coredump文件?</h3><ul>
<li>coredump文件又称之为核型转储文件.进程运行时,突然崩溃时的那一瞬间的进程内存快照,会把进程此刻内存,寄存器状态,运行堆栈等信息转储保存在一个文件</li>
</ul>
<h3 id="怎么产生"><a href="#怎么产生" class="headerlink" title="怎么产生?"></a>怎么产生?</h3><ul>
<li>ulimit -a 查看core file size</li>
</ul>
<h3 id="调试coredump文件-1"><a href="#调试coredump文件-1" class="headerlink" title="调试coredump文件"></a>调试coredump文件</h3><ul>
<li>gdb [binfile] [coredump file]<ol>
<li>查看调用堆栈,寻找崩溃原因.</li>
<li>根据崩溃点,查找代码,分析原因.</li>
<li>修复bug.</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Git基本操作</title>
    <url>/2024/11/15/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># no .a files </span></span><br><span class="line">*.a </span><br><span class="line"><span class="comment"># but do track lib.a, even though you&#x27;re ignoring .a files above </span></span><br><span class="line">!lib.a </span><br><span class="line"><span class="comment"># only ignore the TODO file in the current directory, not subdir/TODO </span></span><br><span class="line">/TODO </span><br><span class="line"><span class="comment"># ignore all files in the build/ directory </span></span><br><span class="line">build/ </span><br><span class="line"><span class="comment"># ignore doc/notes.txt, but not doc/server/arch.txt </span></span><br><span class="line">doc/*.txt </span><br><span class="line"><span class="comment"># ignore all .pdf files in the doc/ directory </span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2025/07/16/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>yzy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以将代码写到外部文件中 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- script 标签一旦用于引入外部 js 文件，当前 script 标签就不能再写 js 代码了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;path.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 也可以直接写在内部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// js 按照从上到下顺序依次执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&quot;浏览器弹窗&quot;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// document.write(&quot;在 body 中写内容&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在浏览器控制台输出&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;可以将 js 代码写到标签的 onclick 属性中&#x27;);&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;可以将 js 代码写到超链接的 href 属性中&#x27;)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li>严格区分大小写</li>
<li>每一条语句已分号结尾</li>
<li>声明变量: var、let</li>
<li>数据类型(typeof var 可输出变量类型)<ul>
<li>String<ul>
<li>使用双引号或者单引号都可以</li>
<li>使用 \ 进行转义<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Number<ul>
<li>包括整数和浮点数</li>
<li>Number.MAX_VALUE 表示 js 中的最大值</li>
<li>如果数字超过了最大值，则会返回  Infinitely</li>
<li>NoN 也是 Number 类型</li>
</ul>
</li>
<li>Boolean<ul>
<li>true、false</li>
</ul>
</li>
<li>Null<ul>
<li>Null 类型的值只有一个，就是null(专门用于表示空对象)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">typeof</span> a;  <span class="comment">// 会返回 Object 类型</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Undefined<ul>
<li>Undefined 类型的值只有一个，就是undefined(声明变量但是不赋值)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Object</li>
</ul>
</li>
<li>强制类型转换<ul>
<li>转换为 String<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：调用 toString() 方法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = a.<span class="title function_">toString</span>(); <span class="comment">// Number 转换为 String</span></span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line">a = a.<span class="title function_">toString</span>(); <span class="comment">// Boolean 转换为 String</span></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = a.<span class="title function_">toString</span>(); <span class="comment">// error </span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = a.<span class="title function_">toString</span>(); <span class="comment">// error (null 和 undefined 没有toString()方法)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：调用 String() 函数</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="title class_">String</span>(a);</span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="title class_">String</span>(a);  <span class="comment">// 正确的, 变成 &quot;null&quot;</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="title class_">String</span>(a);  <span class="comment">// 正确的, 变成 &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>转化为 Number<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">// 方式一：使用 Number() 函数</span></span><br><span class="line">a = <span class="title class_">Numner</span>(a);</span><br><span class="line"><span class="comment">// 如果字符串中有非数字，则转化为 NaN</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span></span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 NaN</span></span><br><span class="line"><span class="comment">//  如果字符串是空串或者全是空格，则转化为 0</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 0</span></span><br><span class="line"><span class="comment">// Boolean 只会变成 0 或 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 0</span></span><br><span class="line"><span class="comment">// null 会变成 0</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 0</span></span><br><span class="line"><span class="comment">// undefined 会变成 NaN</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);  <span class="comment">// a 变成 NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：parseInt()、parseFloat() 这两个函数可以将一个字符串中的有效数字取出来</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123px&quot;</span></span><br><span class="line">a = <span class="built_in">parseInt</span>(a);  <span class="comment">// a = 123</span></span><br></pre></td></tr></table></figure></li>
<li>转化为 Boolean<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 Boolean() 函数</span></span><br><span class="line"><span class="comment">// 数字转 Boolean, 除了 0 和 NaN，其余都是 true</span></span><br><span class="line"><span class="comment">// 字符串转 Boolean，除了空串都是 true</span></span><br><span class="line"><span class="comment">// null 转换为 Boolean 是 false</span></span><br><span class="line"><span class="comment">// undefined 转换为 Boolean 是 false</span></span><br><span class="line"><span class="comment">// 对象也会转换为 true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="title class_">Boolean</span>(a); <span class="comment">// a = true;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>算数运算符<ul>
<li>当对非 Number 类型的值进行运算时，会将这些值转换为 Number 再运算</li>
<li>任何值和 NaN 运算，结果都是 NaN</li>
<li>两个字符串相加，会把两个字符串拼起来</li>
<li>任何值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串操作<ul>
<li>可以利用这一特点，将任意数据类型转换为 String，直接 + 一个 “”, 即可转换<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;3&quot;</span>; <span class="comment">// &quot;33&quot; 从左往右算</span></span><br><span class="line">result = <span class="string">&quot;1&quot;</span> + <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// &quot;123&quot;</span></span><br><span class="line">result = <span class="number">100</span> - <span class="string">&quot;1&quot;</span>;   <span class="comment">// 99 只有加法才会优先转为 String，其他都是转为 Number</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>一元运算符<ul>
<li>正号不会对数字产生任何影响</li>
<li>负号可以对数字进行取反</li>
<li>对于非 Number 类型的值，会先转化为 Number，再运算</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>！</li>
<li>&amp;&amp; <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span> &amp;&amp; <span class="number">6</span>; <span class="comment">// a = 6;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> &amp;&amp; <span class="number">2</span>; <span class="comment">// a = 0;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> &amp;&amp; <span class="number">0</span>; <span class="comment">// a = 0;</span></span><br></pre></td></tr></table></figure></li>
<li>||<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> || <span class="number">1</span>; <span class="comment">// a = 2;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> || <span class="number">0</span>; <span class="comment">// a = 1;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> || <span class="number">1</span>; <span class="comment">// a = 1;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>相等运算符<ul>
<li>&#x3D;&#x3D; 会做自动类型转换，&#x3D;&#x3D;&#x3D; 不会</li>
</ul>
</li>
<li>代码块<ul>
<li>js 的代码块只具有分组作用(方便看,以及用于 if 语句)，没有其他用途，代码块内部的内容，代码块外部是全部可见的</li>
</ul>
</li>
<li>if 语句<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>while 语句<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure></li>
<li>for 语句<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="对象-一切皆是对象"><a href="#对象-一切皆是对象" class="headerlink" title="对象(一切皆是对象)"></a>对象(一切皆是对象)</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>内建对象：Math、String、Number…</li>
<li>宿主对象：有 js 运行环境提供，只要指由浏览器提供的对象（BOM、DOM）</li>
<li>自定义对象</li>
</ul>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">// 或者 var obj = &#123;&#125;; 创建对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;yzy&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 也可以在创建时同时指定属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;yzy&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 打印对象中的元素</span></span><br><span class="line"><span class="string">for (var n in obj) &#123;</span></span><br><span class="line"><span class="string">    console.log(n); // n 是对象的属性名</span></span><br><span class="line"><span class="string">    console.log(obj[n]);  // 打印属性值</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>全局变量是全局对象 window 的属性</li>
<li>创建的函数都会成为 window 的方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">func</span>();</span><br></pre></td></tr></table></figure></li>
<li>使用 var 关键字声明的变量，会在所有的代码执行之前被声明，但是不会赋值</li>
<li>使用函数声明形式创建的函数 function 函数(){} 会在所有的代码执行之前就被创建，所以可以在函数声明前调用函数</li>
<li>使用函数表达式创建的函数，var func &#x3D; function(){} 不会被声明提前，所以不能在声明前调用</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="构造函数创建函数对象"><a href="#构造函数创建函数对象" class="headerlink" title="构造函数创建函数对象"></a>构造函数创建函数对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// 会打印 &quot;function&quot;</span></span><br><span class="line"><span class="comment">// 可以将封装的代码以字符串的形式传递给构造函数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;hello, this is my first function!&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="使用函数声明来创建函数"><a href="#使用函数声明来创建函数" class="headerlink" title="使用函数声明来创建函数"></a>使用函数声明来创建函数</h3><ul>
<li>语法：function 函数名(形参1、形参2、形参3…) { 函数体 }<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用函数表达式创建函数"><a href="#使用函数表达式创建函数" class="headerlink" title="使用函数表达式创建函数"></a>使用函数表达式创建函数</h3><ul>
<li>语法：var 函数名 &#x3D; function(形参1、形参2、形参3…) { 函数体 }<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul>
<li>调用函数时解析器不会检查实参的类型</li>
<li>调用函数时解析器不会检查实参的数量，多余的实参不会被赋值</li>
<li>如果实参的数量少于形参的数量，则没有对应实参的形参是 undefined<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 3 没用</span></span><br></pre></td></tr></table></figure></li>
<li>实参也可以是一个函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这经常使用，将一个匿名函数传递给一个函数</span></span><br><span class="line"><span class="title function_">func</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ul>
<li>使用 return var;<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>函数不 return，则会返回 undefined</li>
</ul>
<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><ul>
<li>函数定义完，立即被调用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解析器在调用函数时，每次都会向函数内部传递一个隐含的参数-this"><a href="#解析器在调用函数时，每次都会向函数内部传递一个隐含的参数-this" class="headerlink" title="解析器在调用函数时，每次都会向函数内部传递一个隐含的参数 this"></a>解析器在调用函数时，每次都会向函数内部传递一个隐含的参数 this</h3><ul>
<li>以函数的形式调用时，this 永远都是 window</li>
<li>以方法的形式调用时，this 就是调用方法的那个对象</li>
</ul>
<h3 id="工厂函数构建对象"><a href="#工厂函数构建对象" class="headerlink" title="工厂函数构建对象"></a>工厂函数构建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name;</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title function_">createObj</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li>构造函数就是普通函数，不同的是习惯上首字母大写，且构造函数需要使用 new 关键字调用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="构造函数执行流程"><a href="#构造函数执行流程" class="headerlink" title="构造函数执行流程"></a>构造函数执行流程</h4><ul>
<li>立即创建一个新的对象</li>
<li>将新建的对象设置为函数中的 this，在构造函数中可以使用 this 来引用新建的对象</li>
<li>逐行执行函数中的代码</li>
<li>将新建的对象作为返回值返回</li>
</ul>
<h5 id="使用instanceof-可以检查一个对象是否是一个类的实例"><a href="#使用instanceof-可以检查一个对象是否是一个类的实例" class="headerlink" title="使用instanceof 可以检查一个对象是否是一个类的实例"></a>使用instanceof 可以检查一个对象是否是一个类的实例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>所有对象都是 Object 的后代，所有任何对象 instanceof Object 都返回 true</li>
</ul>
<h3 id="对象方法的创建"><a href="#对象方法的创建" class="headerlink" title="对象方法的创建"></a>对象方法的创建</h3><ul>
<li>直接在构造函数中定义方法，会导致每次 new 一个对象时，都会创建方法，浪费~<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用全局函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = func;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用全局函数当作对象方法会污染全局空间<ul>
<li>所创建的每一个函数，解析器都会向函数中添加一个属性 prototype，这个属性对应这一个对象，这个对象就是原型对象</li>
<li>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，可以通过 <strong>proto</strong> 来访问该属性<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = func;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">__proto__</span>); <span class="comment">// 和 Person.prototype 的值相同</span></span><br></pre></td></tr></table></figure></li>
<li>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象<ul>
<li>可以将对象中的共有内容，统一设置到原型对象中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = func;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span>; <span class="comment">// 向 Person 类的原型对象中添加属性 a</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，不用分别为每一个对象添加，也不会影响到全局作用域</li>
<li>原型对象也是对象，所以它也有原型</li>
<li>Object 是所有对象的原型</li>
<li>当我们在页面中直接打印一个对象时，实际上是输出对象的 toString() 方法的返回值</li>
</ul>
</li>
</ul>
<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h2><ul>
<li><p>数组也是一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">// var arr = []; //  也可以</span></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>读取索引范围外会返回 undefined</p>
</li>
<li><p>使用 arr.length 获取元素个数</p>
<ul>
<li>对于连续的数组，length 得到数组的长度</li>
<li>对于非连续的数组，length 得到数组最大的索引 + 1<ul>
<li>创建非连续的数组，浪费空间，尽量创建连续数组</li>
</ul>
</li>
</ul>
</li>
<li><p>修改 length 的值会截断数组的值（多了截断，少了填充）</p>
</li>
<li><p>像数组最后一个位置添加元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr[arr.<span class="property">length</span>] = 值</span><br></pre></td></tr></table></figure></li>
<li><p>使用字面量创建数组，可以在创建时指定数组中的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>]; <span class="comment">// 创建只有一个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>); <span class="comment">// 创建 10 个元素的数组</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组中的元素可以是任意类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]];</span><br></pre></td></tr></table></figure></li>
<li><p>push 方法向数组末尾添加一个或多个元素，返回数组的新长度</p>
</li>
<li><p>unshift 方法向数组开头添加一个或多个元素，返回数组的新长度</p>
</li>
<li><p>pop 方法删除数组最后一个元素，并将删除的元素返回</p>
</li>
<li><p>shift 方法删除数组第一个元素，并将删除的元素返回</p>
</li>
<li><p>forEach() 方法便利数组，需要一个函数作为参数(IE8 以上的浏览器才支持)</p>
<ul>
<li>第一个参数：当前正在遍历的元素</li>
<li>第二个参数：正在遍历的元素的索引</li>
<li>第三个参数：正在遍历的数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, obj</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>arr.slice(start, end): 从数组提取指定元素</p>
<ul>
<li>左闭右开</li>
<li>end 可以省略不写，默认是末尾</li>
<li>索引可以传递负值</li>
</ul>
</li>
<li><p>arr.splice(start, end, arg1, arg2,…): 删除数组中的指定元素,还可以添加一些新元素（插入 start 位置），并将被删的元素返回</p>
</li>
<li><p>arr.concat(arr1, arr2, arr3,…): 连接两个数组，并将新数组返回，不会对原数组产生影响</p>
</li>
<li><p>arr.join(连接符): 将数组转化为字符串，不会影响原数组</p>
</li>
<li><p>arr.reverse(): 反转数组，直接修改原数组</p>
</li>
<li><p>arr.sort(): 影响原数组</p>
<ul>
<li>默认从小到大，可以传入函数自定义（返回大于 0，则交换位置；返回小于等于0，不交换位置）</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2024/11/15/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h2></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> *<strong>这是斜体加粗的文字*</strong><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…<br>貌似可以一直加下去，但没神马卵用</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片title<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p>
<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>语法：<br> 数字加点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p><strong>上一级和下一级之间敲三个空格即可</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">表头|<span class="params">表头</span>|表头</span><br><span class="line">---|<span class="params">:--:</span>|---:</span><br><span class="line">内容|<span class="params">内容</span>|内容</span><br><span class="line">内容|<span class="params">内容</span>|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 |<span class="params"> 包起来。此处省略</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">姓名|<span class="params">技能</span>|排行</span><br><span class="line">--|<span class="params">:--:</span>|--:</span><br><span class="line">刘备|<span class="params">哭</span>|大哥</span><br><span class="line">关羽|<span class="params">打</span>|二哥</span><br><span class="line">张飞|<span class="params">骂</span>|三弟</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">esc键下三个点就行</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">  echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Tmux基本操作</title>
    <url>/2024/11/15/Tmux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<ul>
<li>前缀键: ctrl + b</li>
<li>tmux ls: 查看所有tmux会话</li>
<li>新建会话: tmux new -s <session-name></li>
<li>分离会话: ctrl + b + d</li>
<li>接入会话: tmux attach -t <session-name></li>
<li>杀死会话: tmux kill-session -t <session-name></li>
<li>切换会话: tmux switch -t <session-name></li>
<li>重命名会话: tmux rename-session -t oldname <new-name></li>
<li>窗格操作:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ctrl+b %：划分左右两个窗格。</span><br><span class="line">Ctrl+b <span class="string">&quot;：划分上下两个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。&lt;arrow key&gt;是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。</span></span><br><span class="line"><span class="string">Ctrl+b ;：光标切换到上一个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b o：光标切换到下一个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b &#123;：当前窗格与上一个窗格交换位置。</span></span><br><span class="line"><span class="string">Ctrl+b &#125;：当前窗格与下一个窗格交换位置。</span></span><br><span class="line"><span class="string">Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b x：关闭当前窗格。</span></span><br><span class="line"><span class="string">Ctrl+b !：将当前窗格拆分为一个独立窗口。</span></span><br><span class="line"><span class="string">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</span></span><br><span class="line"><span class="string">Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小。</span></span><br><span class="line"><span class="string">Ctrl+b q：显示窗格编号。</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu配置</title>
    <url>/2025/07/06/Ubuntu%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Ubuntu配置"><a href="#Ubuntu配置" class="headerlink" title="Ubuntu配置"></a>Ubuntu配置</h1><hr>
<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ul>
<li>apt-fast 多线程下载<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:apt-fast/stable</span><br><span class="line"><span class="built_in">sudo</span> apt install apt-fast</span><br><span class="line"><span class="built_in">sudo</span> apt-fast update</span><br></pre></td></tr></table></figure></li>
<li>ssh</li>
<li>net-tools</li>
<li>tmux</li>
<li>git</li>
<li>vim</li>
<li>htop</li>
<li>gcc</li>
<li>make</li>
<li>neofetch</li>
<li>zsh<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure></li>
<li>clash-verge-rev<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.3.1/Clash.Verge_2.3.1_amd64.deb</span><br><span class="line"><span class="built_in">sudo</span> apt install ./Clash.Verge_2.3.1_amd64.deb</span><br></pre></td></tr></table></figure></li>
<li>lazygit<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu25</span></span><br><span class="line"><span class="built_in">sudo</span> apt install lazygit</span><br><span class="line"><span class="comment"># ubuntu24及以下版本</span></span><br><span class="line">LAZYGIT_VERSION=$(curl -s <span class="string">&quot;https://api.github.com/repos/jesseduffield/lazygit/releases/latest&quot;</span> | \grep -Po <span class="string">&#x27;&quot;tag_name&quot;: *&quot;v\K[^&quot;]*&#x27;</span>)</span><br><span class="line">curl -Lo lazygit.tar.gz <span class="string">&quot;https://github.com/jesseduffield/lazygit/releases/download/v<span class="variable">$&#123;LAZYGIT_VERSION&#125;</span>/lazygit_<span class="variable">$&#123;LAZYGIT_VERSION&#125;</span>_Linux_x86_64.tar.gz&quot;</span></span><br><span class="line">tar xf lazygit.tar.gz lazygit</span><br><span class="line"><span class="built_in">sudo</span> install lazygit -D -t /usr/local/bin/</span><br></pre></td></tr></table></figure></li>
<li>yazi<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ffmpeg 7zip jq poppler-utils fd-find ripgrep fzf zoxide imagemagick</span><br><span class="line"><span class="comment"># 方法一: 下载官方编译过的包</span></span><br><span class="line">wget https://github.com/sxyazi/yazi/releases/download/nightly/yazi-x86_64-unknown-linux-gnu.deb</span><br><span class="line"><span class="built_in">sudo</span> apt install ./yazi-x86_64-unknown-linux-gnu.deb</span><br><span class="line"><span class="comment"># 方法二: 手动编译</span></span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line">rustup update</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sxyazi/yazi.git</span><br><span class="line"><span class="built_in">cd</span> yazi</span><br><span class="line">cargo build --release --locked</span><br><span class="line"><span class="built_in">mv</span> target/release/yazi target/release/ya /usr/local/bin/</span><br></pre></td></tr></table></figure></li>
<li>nvim<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-add-repository ppa:neovim-ppa/unstable</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install neovim</span><br><span class="line"><span class="comment"># 安装nodejs</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y curl</span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh</span><br><span class="line"><span class="built_in">sudo</span> -E bash nodesource_setup.sh</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br><span class="line">node -v</span><br><span class="line">build avante.nvim</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><ul>
<li>卸载单个包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove example-package</span><br></pre></td></tr></table></figure></li>
<li>卸载包及其配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt purge example-package</span><br></pre></td></tr></table></figure></li>
<li>卸载并自动处理依赖<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="dwm"><a href="#dwm" class="headerlink" title="dwm"></a>dwm</h2><h3 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h3><ul>
<li>feh</li>
<li>compton (或者xcompmgr)</li>
<li>xorg-dev (可能需要 suckless-tools libx11-dev libxft-dev libxinerama-dev)</li>
<li>ubuntu-restricted-extras (基本包含所有基本的媒体编码器)</li>
<li>tlp tlp-rdw (电池管理工具)</li>
<li>acpi acpitool (电源监控工具)</li>
<li>timeshift (系统备份工具)</li>
<li>light (背光灯调整工具)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为背光灯调整工具设置sudo免密码</span></span><br><span class="line"><span class="built_in">sudo</span> visudo</span><br><span class="line"><span class="comment"># 在文本最后加入如下代码</span></span><br><span class="line">&#123;登录系统的用户名&#125; ALL=NOPASSWD:/usr/bin/light</span><br></pre></td></tr></table></figure></li>
<li>preload (默认记录使用率最高的软件，添加如内存，打开该应用会提速)</li>
<li>vim-gtk (将vim中的文本内容复制到系统剪切板,~&#x2F;.vimrc set clipboard&#x3D;unnamedplus)</li>
<li>flameshot (截屏软件)</li>
<li>fcitx5</li>
<li>vmware-tools<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open-vm-tools open-vm-desktop</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash | <span class="built_in">sudo</span> apt install fcitx5 fcitx5-*</span><br></pre></td></tr></table></figure></li>
<li>更改登陆界面<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thiggy01/change-gdm-background</span><br><span class="line"><span class="comment">##修改登陆界面颜色</span></span><br><span class="line"><span class="built_in">sudo</span> ./change-gdm-background \#130c0e</span><br><span class="line"><span class="built_in">sudo</span> ./change-dgm-background ~/xx/xx.jpg</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="DWM启动方式"><a href="#DWM启动方式" class="headerlink" title="DWM启动方式"></a>DWM启动方式</h3><ul>
<li>用gdm3做为display manager<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置完成之后可以在登录界面选择dwm作为桌面启动</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/xsessions/</span><br><span class="line"><span class="built_in">touch</span> dwm.desktop</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Dwm</span><br><span class="line">Comment=Dynamic window manager</span><br><span class="line">Exec=dwm</span><br><span class="line">Icon=dwm</span><br><span class="line">Type=XSession</span><br></pre></td></tr></table></figure></li>
<li>使用startx命令从文字界面启动(推荐)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改grub配置,打开文件/etc/default/grub,将GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;的改为GRUB_CMDLINE_LINUX_DEFAULT=&quot;text&quot;然后执行命令</span></span><br><span class="line"><span class="built_in">sudo</span> update-grub</span><br><span class="line"><span class="comment"># 将启动等级改为多用户等级，执行如下命令：</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl set-default multi-user.target </span><br><span class="line"><span class="comment"># 如果想改回启动图形界面执行下面</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl set-default graphical.target</span><br><span class="line"><span class="comment"># 最后修改~/.xsession文件（如果没有就新建），在最后一行加入</span></span><br><span class="line"><span class="built_in">exec</span> dwm</span><br><span class="line"><span class="comment"># 重启电脑，执行startx命令，直接进入dwm，同时也可以执行sudo systemctl start gdm.service命令，打开gdm3的用户登录界面</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="dwm配置"><a href="#dwm配置" class="headerlink" title="dwm配置"></a>dwm配置</h3><ul>
<li>安装字体<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前用户安装</span></span><br><span class="line"><span class="built_in">cp</span> *.ttf ~/.local/share/fonts/</span><br><span class="line"><span class="comment"># 系统范围安装</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /path/to/fonts/font.ttf /usr/share/fonts</span><br><span class="line"><span class="built_in">sudo</span> fc-cache -f -v</span><br><span class="line">fc-list</span><br></pre></td></tr></table></figure></li>
<li>为软件指定打开标签<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xprop | grep WM_CLASS</span><br><span class="line"><span class="comment"># 鼠标会变为十字架,用十字架点击想要被指定的软件的打开窗口, terminal 就会显示该软件的 instance 和 class</span></span><br><span class="line"><span class="comment"># 将信息填入 config.h 的rule中</span></span><br></pre></td></tr></table></figure></li>
<li>use slock<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> addgroup --system nobody</span><br></pre></td></tr></table></figure></li>
<li>触控板<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端，然后输入以下命令来列出所有输入设备：</span></span><br><span class="line">xinput list</span><br><span class="line"><span class="comment"># 找到触控板设备的名称或 ID。</span></span><br><span class="line"><span class="comment"># 使用以下命令来启用轻点功能（假设你的触控板 ID 是 12，可以根据实际结果更改）：</span></span><br><span class="line">xinput set-prop 12 <span class="string">&quot;libinput Tapping Enabled&quot;</span> 1</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Vim基本操作</title>
    <url>/2024/11/15/Vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><ul>
<li><p>.命令可以让我们重复上次的修改(理想模式: 用一键移动,另一键执行)</p>
<ul>
<li>重复上次修改: 从进入插入模式的那一刻起, 直到返回普通模式时为止</li>
<li>x, dd, &gt;G 等普通模式中执行的命令</li>
</ul>
</li>
<li><blockquote>
<p>G: 增加从当前行到文档末尾处的缩进层级</p>
</blockquote>
</li>
<li><p>$: 使光标移动到行尾</p>
</li>
<li><p>S: 删除光标下的字符并进入插入模式(我禁用了)</p>
</li>
<li><p>A: 使光标移动到行尾并进入插入模式</p>
</li>
<li><p>I: 使光标移动到行首并进入插入模式</p>
</li>
<li><p>o: 向下换行</p>
</li>
<li><p>O: 向上换行</p>
</li>
<li><p>f{char}</p>
<ul>
<li>使用;键可以跳到下一个  </li>
<li>使用,键可以跳到上一个</li>
</ul>
</li>
<li><p>&#x2F;: 在文档中查找下一处匹配项</p>
</li>
<li><p>?: 在文档中查找上一处匹配项</p>
</li>
<li><p>*: 高亮光标出的词并移动到下一处</p>
</li>
<li><p>u: 撤销(从进入插入模式开始, 直到返回普通模式为止, 在此期间输入或删除的任何内容都被当成一次修改; 在插入模式中移动光标会重置修改状态)(此功能可以让你控制撤销粒度)</p>
</li>
<li><p><C-v>模式下,r可以修改所有列选中的位置</p>
</li>
<li><p>!{cmd}: 运行shell命令</p>
</li>
<li><p>ea: 在当前单词结尾后添加</p>
</li>
<li><p>m{a-zA-Z} &#96;{mark}: 添加标签,回到标签(大写字母是全局标记)</p>
</li>
<li><p>&#96;&#96;: 当前文件中上次跳转动作之前的位置</p>
<ul>
<li>%r]&#96;&#96;r[: 修改包围的符号,change surround</li>
</ul>
</li>
<li><p>&#96;.: 上次修改的地方</p>
</li>
<li><p>gi: 跳转到上次插入的地方</p>
</li>
<li><p>^: 移动光标到行首第一个非空字符处</p>
</li>
<li><p>$: 移动光标到行末最后一个非空字符处</p>
</li>
<li><p>&#x3D;: 自动缩进(格式化)</p>
</li>
<li><p>dtn: 删除字符n前面的内容</p>
</li>
<li><p>zz: 将光标所在行移动到窗口中央</p>
</li>
<li><p>撤销在普通模式下使用u，反撤销使用Ctrl+r</p>
</li>
<li><p>对比两个文件:</p>
<ul>
<li>在终端下: nvim -d 文件名1 文件名2</li>
<li>在nvim中: :diffsplit 要对比的文件名</li>
</ul>
</li>
<li><p>ctrl+z暂停vim返回shell,shell里做完想做的事,然后fg返回vim</p>
</li>
<li><p>%命令允许在一组开、闭括号间跳转，可作用于 ()、{}以及[]</p>
</li>
<li><p>daw&#x2F;caw: 会删除当前单词以及前一个空格</p>
</li>
<li><p><C-a>&#x2F;<C-x>: 对数字执行加&#x2F;减操作; 10<C-a>: 对最近的数字加10 (有进制的区别: 0xff + 1 &#x3D; 0x100)</p>
</li>
<li><p>插入模式下</p>
<ul>
<li><C-h>: 删除前一个字符</li>
<li><C-w>: 删除前一个单词</li>
<li><C-u>: 删至行首</li>
<li><Esc>: 切换到普通模式</li>
<li>&lt;C-[&gt;: 切换到普通模式</li>
<li><C-o>: 切换到插入-普通模式(可以执行一个普通模式命令, 执行完后, 马上就又返回到插入模式, eg: <C-o>zz 调整屏幕显示位置并继续插入)</li>
<li><C-r>{register}: 粘贴某个寄存器的内容</li>
<li><C-r> &#x3D;: 表达式寄存器, 可以做简单的算数表达式</li>
<li>r: 修改一个字符</li>
<li>R: 进入修改模式，直到回到普通模式</li>
</ul>
</li>
<li><p>普通模式下</p>
<ul>
<li>J: 把当前行和下一行连接在一起</li>
<li>K: 查看处于光标之下的那个单词的手册页</li>
<li><C-o>: 运行跳转命令时, 会在跳转列表中添加一条记录, 而<C-o>命令会回到跳转列表的上条记录</li>
</ul>
</li>
<li><p>可视模式下</p>
<ul>
<li>v: 激活面向字符的可视模式</li>
<li>V: 激活面向行的可视模式</li>
<li><C-v>: 激活面向列块的可视模式</li>
<li>gv: 重选上次的高亮区域</li>
<li>o: 在可视模式时, o键可以切换光标的端点</li>
<li>.: .命令可以重复上一条在可视模式执行的命令</li>
<li>r: 在可视模式中使用r键时, 会修改选中的所有字符</li>
<li>块选中时,按c删除选中内容并输入新内容, 在返回普通模式时会对所有行都进行修改(即: 快选中时, 对当前行进行修改时, 会对所有行都进行); 按A&#x2F;I可在行末&#x2F;首进行修改</li>
<li><C-g>: 可以在可视模式及选择模式间切换(选择模式中输入任意可见字符, 此字符会替换所选内容并切换到插入模式. 几乎不用)</li>
</ul>
</li>
<li><p>命令行模式下</p>
<ul>
<li>tabnew, tabnext, tabprevious, tabclose: 操作tab</li>
<li>badd filename, bNext, bdelete: 操作buffer</li>
<li><C-w>&#x2F;<C-u>: 删除至上个单词的开头及行首</li>
<li>{start},{end}+action: eg:3,5p (.代表当前行的地址; $代表文件末尾行; %代表当前文件中的所有行)(.,.+3p 会对当前行至下三行进行打印)</li>
<li>{range}copy{address}: 复制</li>
<li>{range}copy{address}: 移动</li>
<li>在高亮时按下:后执行命令时,会对所有行执行该命令</li>
<li>在行选中模式下,按{:normal 指令}将会对高亮区中的每一行,对其执行普通模式下的指令(实际上就是选中范围{range}再输入normal)</li>
<li>@: : 重复上次执行的Ex命令; 在运行过一次@:后,后面就可以用@@命令来重复它</li>
<li>在命令行上也可以用<Tab>键自动补全命令</li>
<li>vim会记录命令行模式中执行过的命令; 也会为查找命令单独保存一份历史记录(使用上下方向键或者<C-p>&#x2F;<C-n>遍历)</li>
<li>q: : 可以调出命令行窗口, 此时可以对窗口内的命令进行编辑</li>
<li>正在命令行构建一条Ex命令,做到一半时,意识到需要更强大的编辑能力,此时可以按<C-f>打开命令行窗口</li>
<li>在命令行模式中,给命令加一个叹号前缀!,就可以调用外部程序</li>
<li>read !{cmd} 可以把{cmd}命令的输出读入当前缓冲区中</li>
<li>write !{cmd} 把缓冲区内容作为指定{cmd}的标准输入</li>
</ul>
</li>
</ul>
<h2 id="选取范围"><a href="#选取范围" class="headerlink" title="选取范围"></a>选取范围</h2><ul>
<li>a)或ab一对圆括号(parentheses)</li>
<li>i)或ib圆括号(parentheses)内部</li>
<li>a}或aB一对花括号{braces}</li>
<li>i}或iB花括号{braces}内部</li>
<li>a] 一对方括号[brackets]</li>
<li>i] 方括号[brackets]内部</li>
<li>a&gt; 一对尖括号 <angle brackets></li>
<li>i&gt; 尖括号 <angle brackets> 内部</li>
<li>a’ 一对单引号’single quotes’</li>
<li>i’ 单引号’single quotes’内部</li>
<li>a” 一对双引号”double quotes”</li>
<li>i” 双引号”double quotes”内部</li>
<li>a<code> 一对反引号</code>backticks&#96;</li>
<li>i<code> 反引号</code>backticks&#96;内部</li>
<li>at 一对XML标签<xml>tags</xml></li>
<li>it XML标签内部</li>
<li>iW 当前字串</li>
<li>aW 当前字串及一个空格</li>
<li>is 当前句子</li>
<li>as 当前句子及一个空格</li>
<li>ip 当前段落</li>
<li>ap 当前段落及一个空行</li>
</ul>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul>
<li>m{a-zA-Z}命令会用选定的字母标记当前光标所在位置. 小写位置标记只在每个缓冲区里局部可见, 而大写位置标记则全局可见. &#96;{mark}命令跳到位置标记所在行, 并把光标置于该行第一个非空白字符上</li>
<li>&#96;&#96; 当前文件中上次跳转动作之前的位置</li>
<li>&#96;. 上次修改的地方</li>
<li>&#96;^ 上次插入的地方</li>
<li>&#96;[ 上次修改或复制的起始位置</li>
<li>&#96;] 上次修改或复制的结束位置</li>
<li>&#96;&lt; 上次高亮选区的起始位置</li>
<li>&#96;&gt; 上次高亮选区的结束位置</li>
</ul>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul>
<li><p>j: 向下移动一个实际行 gj: 向下移动一个屏幕行</p>
</li>
<li><p>k: 向上移动一个实际行 gk: 向上移动一个屏幕行</p>
</li>
<li><p>0: 移动到实际行的行首 g0: 移动到屏幕行的行首</p>
</li>
<li><p>^: 移动到实际行的第一个非空白字符 g^: 移动到屏幕行的第一个非空白字符 </p>
</li>
<li><p>$: 移动到实际行的行尾 g$: 移动到屏幕行的行尾</p>
</li>
<li><p>w: 正向移动到下一单词的开头 </p>
</li>
<li><p>b: 反向移动到当前单词&#x2F;上一单词的开头 </p>
</li>
<li><p>e: 正向移动到当前单词&#x2F;下一单词的结尾 </p>
</li>
<li><p>ge: 反向移动到上一单词的结尾</p>
</li>
<li><p>W、B、E 和gE面向字串移动</p>
</li>
</ul>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul>
<li>f{char}: 正向移动到下一个{char}所在之处 </li>
<li>F{char}: 反向移动到上一个{char}所在之处 </li>
<li>t{char}: 正向移动到下一个{char}所在之处的前一个字符上 </li>
<li>T{char}: 反向移动到上一个{char}所在之处的后一个字符上</li>
<li>dt{char}: 从当前位置删除到char之前</li>
<li>可视模式下也可使用&#x2F;进行查找</li>
</ul>
<h2 id="在文件间跳转"><a href="#在文件间跳转" class="headerlink" title="在文件间跳转"></a>在文件间跳转</h2><ul>
<li>用[count]G命令直接跳到指定的行号也会被当成一次跳转, 但每次向上或向下移动一行则不算. 面向句子的动作及面向段落的动作都算跳转, 但面向字符及面向单词的动作则不算. 用一句话来概括, 可以说大范围的动作命令可能会被当成跳转, 但小范围的动作命令则只能算移动.</li>
<li><C-o>: 后退</li>
<li><C-i>: 前进</li>
</ul>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><ul>
<li>Vim的删除、复制与粘贴命令都会用到众多寄存器中的某一个. 可以通过给命令加”{register}前缀的方式指定要用的寄存器. 若不指明，Vim将缺省使用无名寄存器</li>
<li>想把当前单词复制到寄存器a中, 可执行”ayiw, 或者, 可以用”bdd, 把当前整行文本剪切至寄存器b中. 在此之后，既可以输入”ap粘贴来自寄存器a的单词, 也可使用”bp命令粘贴来自寄存器b的一整行文本, 两者互不干扰</li>
<li>当我们使用y{motion}命令时, 要复制的文本不仅会被拷贝到无名寄存器中, 而且也被拷贝到了复制专用寄存器中, 后者可用数字0加以引用. 复制专用寄存器, 顾名思义, 仅当使用y{motion}命令时才会被赋值. 换句话讲, 使用x、s、c{motion}以及d{motion}命令均不会覆盖该寄存器. 如果复制了一些文本, 可以确信该文本会一直保存于寄存器0中, 直到复制其他文本时才会被覆盖. 复制专用寄存器是稳定的, 而无名寄存器是易变的. 尽管diw 命令仍会覆盖无名寄存器, 但不会波及复制专用寄存器. 可以通过输入”0P, 安全地粘贴来自复制专用寄存器中的内容.</li>
<li>用小写字母引用有名寄存器, 会覆盖该寄存器的原有内容, 而换用大写字母的话, 则会将新内容添加到该寄存器的原有内容之后</li>
<li>系统剪贴板(“+)与选择专用寄存器(“*): 如果在外部程序中用剪切或复制命令获取了文本, 就可以通过”+p 命令(或在插入模式下用<C-r>+)将其粘贴到Vim内部. 相反地, 如果在Vim的复制或删除命令之前加入”+, 相应的文本将被捕获至系统剪贴板</li>
<li>X11视窗系统支持另一种被叫作主剪贴板的剪贴板, 它保存着上次被高亮选中的文本, 可以用鼠标中键(如果有的话)把它们粘贴出来. Vim的星号寄存器对应主剪贴板, 可用*号加以引用</li>
<li>p命令旨在将寄存器中的文本粘贴到光标之后. 作为补充, Vim也提供了大写的P命令用于将文本插入到光标之前</li>
</ul>
<h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><ul>
<li>q{char}{changes}q记录宏</li>
<li>q键既是“录制”按钮，也是“停止”按钮</li>
<li>:reg {char}: 查看指定宏内容</li>
<li>用@{register}命令执行指定寄存器的内容, 也可以用@@来重复最近调用过的宏</li>
<li>输入qa时, Vim将开始录制接下来的按键操作, 并将它们保存到寄存器a中, 这会覆盖该寄存器原有的内容. 如果输入的是qA的话, Vim也会录制按键操作, 但会把它们附加到寄存器a原有的内容之后</li>
<li>当动作命令失败时, 宏将中止执行</li>
</ul>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul>
<li>通过使用元字符\c与\C，可以覆盖Vim缺省的大小写敏感性设置。小写字母\c 会让查找模式忽略大小写，而大写字母\C则会强制区分大小写。</li>
<li>正则表达式使用\进行转义</li>
</ul>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul>
<li>[range] [substitute]&#x2F;{pattern}&#x2F;{string}&#x2F;[flags]<ul>
<li>range:<ul>
<li>使用可视模式选取范围</li>
<li>%: 表示整个文件</li>
<li>1,20: 第1行~第20行</li>
<li>.,+2 当前行~往后2行</li>
<li>.,$ 当前行~文件尾</li>
</ul>
</li>
<li>flags:<ul>
<li>g: 全局范围内执行</li>
<li>c: 可以确认或拒绝每一处修改</li>
<li>n: 抑制正常的替换行为, 只是报告本次substitute命令匹配的个数</li>
</ul>
</li>
</ul>
</li>
<li>substitute命令要在整个x轴与y轴上执行, 即凭借标志位g处理横轴字符的同时, 使用地址符%处理纵轴的文本行</li>
<li>替换特殊字符<ul>
<li>\r 插入一个换行符</li>
<li>\t 插入一个制表符</li>
<li>\ 插入一个反斜杠</li>
<li>~ 使用上一次调用:substitute时的{string}</li>
</ul>
</li>
<li>:substitute命令的查找域留空, Vim将使用上一次的查找模式(:%s&#x2F;&#x2F;{new_word}&#x2F;g)</li>
<li>通过输入<C-r>{register}, 可以将寄存器的内容插入到命令行</li>
</ul>
<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><ul>
<li>通过<C-p>与<C-n>这两个组合键, 不仅可以在插入模式下触发Vim的自动补全, 而且还可以用它们在补全列表中反向或正向选择</li>
<li>通过<C-e>来终止这次自动补全, 其效果是下拉菜单将被清除, 并恢复光标前的文本, 即调用自动补全前所输入的内容</li>
<li><C-x><C-f> 文件名补全</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li>:ls 列表的开头有一个数字, 它是在缓冲区创建时由Vim自动分配的编号. 可以用:buffer N 命令直接凭编号跳转到一个缓冲区, 或是用更直观的:buffer {bufname}格式实现同样的功能. {bufname} 只需包含文件路径中足以唯一标识此缓冲区的字符即可</li>
<li>:bufdo 命令允许我们在:ls列出的所有缓冲区上执行Ex命令. 不过在实际应用中, 发现:argdo更加实用</li>
<li>:wa! 把所有改变的缓冲区写入磁盘</li>
<li>:qa! 关闭所有窗口, 摒弃修改无需警告</li>
<li>Explore缩写E :edit 只需输入:e</li>
<li>Vexplore&#x2F;Sexplore: 水平或竖直打开目录树</li>
<li>:write !{cmd} 命令会把缓冲区的内容作为标准输入 传给指定的{cmd}，{cmd} 可以是任何外部程序</li>
<li>:w !sudo tee % &gt; &#x2F;dev&#x2F;null  普通用户保存root权限文件</li>
</ul>
<hr>
<h1 id="install-vim"><a href="#install-vim" class="headerlink" title="install vim"></a>install vim</h1><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim：</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:jonathonf/vim</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install vim</span><br><span class="line"> </span><br><span class="line">nvim：</span><br><span class="line"><span class="built_in">sudo</span> apt-add-repository ppa:neovim-ppa/unstable</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install neovim</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="config-nvim"><a href="#config-nvim" class="headerlink" title="config nvim"></a>config nvim</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S unzip(要解压一些包) git neovim</span><br><span class="line"><span class="comment"># 安装pyright需要安装npm以及python3，这里不需要nodejs</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S npm python3</span><br><span class="line"><span class="comment"># copilot需要高版本的nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># telescope </span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:x4121/ripgrep </span><br><span class="line"><span class="built_in">sudo</span> apt update </span><br><span class="line"><span class="built_in">sudo</span> apt install ripgrep </span><br><span class="line">npm install -g fd-find</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除nvim配置</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.local/share/nvim ~/.cache/nvim ~/.local/state/nvim</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>css</title>
    <url>/2025/07/16/css/</url>
    <content><![CDATA[<h1 id="css-基础-层叠样式表-Cascading-Style-Sheets"><a href="#css-基础-层叠样式表-Cascading-Style-Sheets" class="headerlink" title="css 基础: 层叠样式表 (Cascading Style Sheets)"></a>css 基础: 层叠样式表 (Cascading Style Sheets)</h1><h2 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h2><h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><ul>
<li>写在标签的 style 属性中，（又称：内联样式）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:60px;&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><ul>
<li>写在html 页面内部，将所有的 CSS 代码提取出来，单独放在 <style> 标签中。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><ul>
<li>写在单独的 .css 文件中，随后在 HTML 文件中引入使用。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><link> 标签要写在 <head> 标签中。</li>
</ul>
<h2 id="样式表优先级"><a href="#样式表优先级" class="headerlink" title="样式表优先级"></a>样式表优先级</h2><ul>
<li>行内样式 &gt; 内部样式 &#x3D; 外部样式</li>
</ul>
<h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><ul>
<li>选择器：找到要添加样式的元素。</li>
<li>声明块：设置具体的样式（声明块是由一个或多个声明组成的），声明的格式为：属性名：属性值;</li>
</ul>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h3><ul>
<li>可以选中所有的 HTML 元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><ul>
<li>为页面中 某种元素 统一设置样式。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul>
<li>根据元素的class 值，来选中某些元素。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><ul>
<li>根据元素的id属性值，来精准的选中某个元素。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#id值 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><ul>
<li>选中同时符合多个条件的元素。</li>
<li>语法：选择器1选择器2选择器3…选择器n {}</li>
<li>有标签名，标签名必须写在前面。</li>
<li>交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是 p 元素又是 span 元素。</li>
<li>用的最多的交集选择器是：元素选择器配合类名选择器，例如：p.beauty 。</li>
</ul>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><ul>
<li>选中多个选择器对应的元素，又称：分组选择器。</li>
<li>语法：选择器1, 选择器2, 选择器3, … 选择器n {}</li>
</ul>
<h3 id="HTML元素间的关系"><a href="#HTML元素间的关系" class="headerlink" title="HTML元素间的关系"></a>HTML元素间的关系</h3><ul>
<li>父元素：直接包裹某个元素的元素，就是该元素的父元素。</li>
<li>子元素：被父元素直接包含的元素（简记：儿子元素）。</li>
<li>祖先元素：父亲的父亲……，一直往外找，都是祖先。</li>
<li>后代元素：儿子的儿子……，一直往里找，都是后代。</li>
<li>兄弟元素：具有相同父元素的元素，互为兄弟元素。</li>
</ul>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>选中指定元素中，符合要求的后代元素。</li>
<li>语法：选择器1  选择器2  选择器3  ……  选择器n {}   （先写祖先，再写后代）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 选中ul中所有li中的a */</span><br><span class="line">ul li a &#123;</span><br><span class="line">    color: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><ul>
<li>选中指定元素中，符合要求的子元素（儿子元素）。（先写父，再写子）</li>
<li>语法：选择器1 &gt; 选择器2 &gt; 选择器3 &gt; ……  选择器n {}<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* div中的子代a元素 */</span><br><span class="line">div&gt;a &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><ul>
<li>选中指定元素后，符合条件的相邻兄弟元素。</li>
<li>语法：选择器1+选择器2 {}。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 选中div后相邻的兄弟p元素 */</span><br><span class="line">div+p &#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h4><ul>
<li>选中指定元素后，符合条件的所有兄弟元素。（简记：睡在我下铺的所有兄弟）</li>
<li>语法：选择器1~选择器2 {}。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 选中div后的所有的兄弟p元素 */</span><br><span class="line">div~p &#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>两种兄弟选择器，选择的是下面的兄弟。</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li>选中属性值符合一定要求的元素。</li>
<li>语法：<ul>
<li>[属性名] 选中具有某个属性的元素。</li>
<li>[属性名&#x3D;”值”] 选中包含某个属性，且属性值等于指定值的元素。</li>
<li>[属性名^&#x3D;”值”] 选中包含某个属性，且属性值以指定的值开头的元素。</li>
<li>[属性名$&#x3D;”值”] 选中包含某个属性，且属性值以指定的值结尾的元素。</li>
<li>[属性名*&#x3D;“值”] 选择包含某个属性，属性值包含指定值的元素。</li>
</ul>
</li>
</ul>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><ul>
<li>选中特殊状态的元素。<br>…</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>html</title>
    <url>/2025/07/15/html/</url>
    <content><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li>标签 又称 元素,是HTML的基本组成单位。</li>
<li>标签分为:双标签 与 单标签 (绝大多数都是双标签)。</li>
<li>标签名不区分大小写,但推荐小写,因为小写更规范。</li>
<li>标签之间的关系:并列关系、嵌套关系,可以使用 tab 键进行缩进:</li>
</ul>
<h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><ul>
<li>用于给标签提供 附加信息。</li>
<li>可以写在:起始标签 或  单标签中</li>
<li>有些特殊的属性,没有属性名,只有属性值,例如:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul>
<li>想要呈现在网页中的内容写在body标签中。</li>
<li>head标签中的内容不会出现在网页中。</li>
<li>head标签中的title标签可以指定网页的标题<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line">或  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line">或  </span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ul>
<li>平时编写代码时,统一采用UTF-8编码(最稳妥)。</li>
<li>为了让浏览器在渲染html文件时,不犯错误,可以通过meta标签配合charset属性指<br>定字符编码。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h2><ul>
<li>主要作用:<ul>
<li>让浏览器显示对应的翻译提示。</li>
<li>有利于搜索引擎优化。</li>
</ul>
</li>
<li>具体写法:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="标准结构"><a href="#标准结构" class="headerlink" title="标准结构"></a>标准结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><ul>
<li>h1 ~ h6: 标题</li>
<li>p: 段落</li>
<li>div: 没有任何含义,用于整体布局(生活中的包装袋)。</li>
</ul>
<h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><ul>
<li>em: 要着重阅读的内容</li>
<li>strong: 十分重要的内容(语气比em要强)</li>
<li>span: 没有语义,用于包裹短语的通用容器</li>
</ul>
<h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><ul>
<li>标签名: img:<ul>
<li>src: 图片路径(又称:图片地址)—— 图片的具体位置</li>
<li>alt: 图片描述</li>
<li>width: 图片宽度,单位是像素,例如:200px 或 200</li>
<li>height: 图片高度, 单位是像素,例如:200px 或 200</li>
</ul>
</li>
</ul>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul>
<li>主要作用:从当前页面进行跳转。可以实现:①跳转到指定页面、②跳转到指定文件(也可触发下载)、③跳转到锚点位置、④唤起指定应用。</li>
<li>标签名:a<ul>
<li>href:  指定要跳转到的具体目标。</li>
<li>target:  控制跳转时如何打开页面,常用值如下:</li>
<li>_self: 在本窗口打开。</li>
<li>_blank: 在新窗口打开。</li>
<li>id:  元素的唯一 标识,可用于设置锚点。</li>
<li>name:  元素的名字,写在a标签中,也能设置锚点。</li>
</ul>
</li>
<li>跳转到锚点<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置锚点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种方式:a标签配合name属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种方式:其他标签配合id属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>我是一个位置<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转到test1锚点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跳到本页面顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跳转到其他页面锚点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 刷新本页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>刷新本页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 执行一段js,如果还不知道执行什么,可以留空,javascript:; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span>点我弹窗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>唤起指定应用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 唤起设备拨号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 唤起设备发送邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:10010@qq.com&quot;</span>&gt;</span>邮件联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 唤起设备发送短信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10086&quot;</span>&gt;</span>短信联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>有序列表<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>要把大象放冰箱总共分几步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门打开<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门关上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>无序列表<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>要把大象放冰箱总共分几步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门打开<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门关上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>自定义列表<ul>
<li>一个dl就是一个自定义列表,一个dt 就是一个术语名称,一个dd就是术语描述(可以有多个)。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>如何高效的学习？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>做好笔记<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记是我们以后复习的一个抓手<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记可以是电子版,也可以是纸质版<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>多加练习<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>只有敲出来的代码,才是自己的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>别怕出错<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>错很正常,改正后并记住,就是经验<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul>
<li>一个完整的表格由:表格标题、表格头部、表格主体、表格脚注,四部分组成。</li>
<li>表格涉及到的标签<ul>
<li>table: 表格</li>
<li>caption: 表格标题</li>
<li>thead: 表格头部</li>
<li>tbody: 表格主体</li>
<li>tfoot: 表格注脚</li>
<li>tr: 每一行</li>
<li>th 、td:每一个单元格(备注:表格头部中用</li>
<li>th ,表格主体、表格脚注中用:td)</li>
</ul>
</li>
<li>具体编码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>满族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>群众<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>回族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>党员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>壮族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>共计:4人<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用标签补充"><a href="#常用标签补充" class="headerlink" title="常用标签补充"></a>常用标签补充</h2><ul>
<li>br: 换行单</li>
<li>hr: 分隔单</li>
<li>pre: 按原文显示(一般用于在页面中嵌入大段代码)</li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul>
<li>一个包含交互的区域,用于收集用户提供的数据。</li>
<li>基本结构<ul>
<li>form(表单)<ul>
<li>action:用于指定表单的提交地址(需要与后端人员沟通后确定)。</li>
<li>target:用于控制表单提交后,如何打开页面,常用值如下:<ul>
<li>_self: 在本窗口打开。</li>
<li>_blank: 在新窗口打开。</li>
</ul>
</li>
<li>method:用于控制表单的提交方式,暂时只需了解,在后面Ajax的课程中,会详细讲解。</li>
</ul>
</li>
<li>input(输入框)<ul>
<li>type:设置输入框的类型,目前用到的值是text,表示普通文本。</li>
<li>name:用于指定提交数据的名字,(需要与后端人员沟通后确定)。</li>
</ul>
</li>
<li>button: 按钮</li>
</ul>
</li>
<li>示例代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/s&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>去百度搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常用表单控件"><a href="#常用表单控件" class="headerlink" title="常用表单控件"></a>常用表单控件</h3><ul>
<li><p>文本输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性如下:<ul>
<li>name属性:数据的名称。</li>
<li>value 属性:输入框的默认输入值。</li>
<li>maxlength属性:输入框最大可输入长度。</li>
</ul>
</li>
</ul>
</li>
<li><p>密码输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性如下:<ul>
<li>name属性:数据的名称。</li>
<li>value 属性:输入框的默认输入值(一般不用,无意义)。</li>
<li>maxlength属性:输入框最大可输入长度。</li>
</ul>
</li>
</ul>
</li>
<li><p>单选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性如下:<ul>
<li>name 属性:数据的名称,注意:想要单选效果,多个radio的 name 属性值要保持一致。</li>
<li>value 属性:提交的数据值。</li>
<li>checked 属性:让该单选按钮默认选中。</li>
</ul>
</li>
</ul>
</li>
<li><p>复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span>烫头</span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性如下::<ul>
<li>name 属性:数据的名称。</li>
<li>value 属性:提交的数据值。</li>
<li>checked属性:让该复选框默认选中。</li>
</ul>
</li>
</ul>
</li>
<li><p>隐藏域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>用户不可见的一个输入区域,作用是: 提交表单的时候,携带一些固定的数据。<ul>
<li>name 属性:指定数据的名称。</li>
<li>value 属性:指定的是真正提交的数据。</li>
</ul>
</li>
</ul>
</li>
<li><p>提交按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交表单&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意:<ul>
<li>button 标签 type 属性的默认值是 submit。</li>
<li>button不要指定name 属性</li>
<li>input标签编写的按钮,使用value属性指定按钮文字。</li>
</ul>
</li>
</ul>
</li>
<li><p>重置按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>点我重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意点:<ul>
<li>button不要指定name 属性</li>
<li>input标签编写的按钮,使用value属性指定按钮文字。</li>
</ul>
</li>
</ul>
</li>
<li><p>普通按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>普通按钮的type值为button,若不写type值是submit会引起表单的提交。</li>
</ul>
</li>
<li><p>文本域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;22&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;3&quot;</span>&gt;</span>我是文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性如下:<ul>
<li>rows 属性:指定默认显示的行数,会影响文本域的高度。</li>
<li>cols 属性:指定默认显示的列数,会影响文本域的宽度。</li>
<li>不能编写type属性,其他属性,与普通文本输入框一致。</li>
</ul>
</li>
</ul>
</li>
<li><p>下拉框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;黑&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;辽&quot;</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;吉&quot;</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;粤&quot;</span> <span class="attr">selected</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用属性及注意事项:<ul>
<li>name 属性:指定数据的名称。</li>
<li>option 标签设置了 selected 属性,表示默认选中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="禁用表单控件"><a href="#禁用表单控件" class="headerlink" title="禁用表单控件"></a>禁用表单控件</h3><ul>
<li>给表单控件的标签设置 disabled 既可禁用表单控件。(input 、textarea 、button 、select 、option 都可以设置 )</li>
</ul>
<h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><ul>
<li>iframe: 框架(在网页中嵌入其他文件)<ul>
<li>name: 框架名字</li>
<li>width: 框架的宽。</li>
<li>height: 框架的高度。 </li>
<li>frameborder: 是否显示边框, 值: 0 或者 1。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>pacman用法</title>
    <url>/2024/11/22/pacman%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>-S：synchronize 同步</li>
<li>-R：remove 删除</li>
<li>-Q：query 查询本地</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S 包名 <span class="comment"># 安装软件包的同时会安装该包需要的依赖</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy <span class="comment"># 更新软件源，如果前一段时间已更新过，则pacman不会再去查找更新</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Syy <span class="comment"># 强行更新软件源</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Su <span class="comment"># 更新软件包</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Syu <span class="comment"># 更新软件源并更新软件包</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Syyu <span class="comment"># 强行更新软件源并更新软件包</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Ss 包名 <span class="comment"># 搜索支持正则表达式</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -R 包名</span><br><span class="line"><span class="built_in">sudo</span> pacman -Rs 包名 <span class="comment"># 删除该软件与该软件的依赖包</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Rnsc 包名 <span class="comment"># 删除该软件与该软件的依赖包并删除全局配置文件，个人配置文件不会删除 (推荐使用这种方法!)</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Sc <span class="comment"># 删除缓存(-R删除包之后不会清除文件，只是放到了/var/*目录下)</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="查询本地软件包"><a href="#查询本地软件包" class="headerlink" title="查询本地软件包"></a>查询本地软件包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Q <span class="comment"># 本地所有软件包：系统自带和用户下载的</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Qe <span class="comment"># 本地所有软件包：用户下载的</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Qeq <span class="comment"># 本地所有软件包(不显示版本号)：用户下载的</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Qs 包名 <span class="comment"># 查询本地所有软件中有哪些带有该包名称</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Q | <span class="built_in">wc</span> -l <span class="comment"># 查看一共有多少软件</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -Qdt <span class="comment"># 查询不再被依赖的软件包(孤包)</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -R $(pacman -Qdtq) <span class="comment"># 删除不再被依赖的软件包</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>python</title>
    <url>/2025/07/15/python/</url>
    <content><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 版本管理工具，能让你在不同 Python 版本间轻松切换。可以结合 venv 等虚拟环境工具来管理虚拟环境。</span></span><br><span class="line">brew install pyenv  <span class="comment"># macOS安装pyenv</span></span><br><span class="line">pyenv install --list  <span class="comment"># 列出可安装的 Python 版本</span></span><br><span class="line">pyenv install 3.9.7 <span class="comment"># 安装指定 Python 版本</span></span><br><span class="line">pyenv versions  <span class="comment"># 列出已安装的 Python 版本</span></span><br><span class="line">pyenv global 3.9.7  <span class="comment"># 设置全局 Python 版本</span></span><br><span class="line">pyenv <span class="built_in">local</span> 3.9.7 <span class="comment"># 设置当前目录局部 Python 版本</span></span><br></pre></td></tr></table></figure>
<h3 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 标准库自带的虚拟环境创建工具，用于创建轻量级的虚拟环境。它只能管理虚拟环境，无法管理 Python 版本</span></span><br><span class="line">python3 -m venv myenv  <span class="comment"># 创建名为 myenv 的虚拟环境</span></span><br><span class="line">python3.9 -m venv myenv  <span class="comment"># 创建使用 Python 3.9 的虚拟环境</span></span><br><span class="line">python3 -m venv --without-pip myenv  <span class="comment"># 创建纯净环境</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> myenv/bin/activate  <span class="comment"># 激活后前缀显示(myenv)</span></span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install requests==2.28.2  <span class="comment"># 安装指定版本包</span></span><br><span class="line">pip uninstall pandas          <span class="comment"># 卸载包</span></span><br><span class="line">pip list                      <span class="comment"># 查看已安装包</span></span><br><span class="line">pip freeze &gt; requirements.txt <span class="comment"># 导出依赖清单</span></span><br><span class="line"></span><br><span class="line">deactivate  <span class="comment"># 退出虚拟环境</span></span><br><span class="line"><span class="built_in">rm</span> -r myenv <span class="comment">#删除虚拟环境</span></span><br></pre></td></tr></table></figure>

<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h4><ul>
<li>数字是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</li>
<li>可以使用del语句删除一些数字对象的引用(del var)</li>
</ul>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><ul>
<li>字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</li>
<li>字符串的截取的语法格式如下：变量[头下标:尾下标] (索引值以 0 为开始值，-1 为从末尾的开始位置。)</li>
<li>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 word[0] &#x3D; ‘m’ 会导致错误。</li>
<li>字符串可以用+运算符连接在一起，用*运算符重复。</li>
<li>不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</li>
<li>f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">2</span>]) <span class="comment"># 输出 e (左闭右开)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h4><ul>
<li>bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</li>
<li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li>
<li>可以使用 bool() 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 False：None、False、零 (0、0.0、0j)、空序列（如 ‘’、()、[]）和空映射（如 {}）。其他所有值转换为布尔值时均为 True。</li>
<li>所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 0、空字符串、空列表、空元组等被视为 False。</li>
</ul>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><ul>
<li>列表截取的语法格式与 String 相同。(左闭右开)</li>
<li>列表中的元素是可以改变的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 []</span></span><br><span class="line"><span class="comment"># a 变成 [9, 2, 6]</span></span><br></pre></td></tr></table></figure></li>
<li>列表可以使用 + 操作符进行拼接。</li>
<li>Python 列表截取可以接收第三个参数，参数作用是截取的步长。(list[1:4:2], 2 是步长)</li>
<li>更新列表：append()</li>
<li>删除列表元素：del list[index]</li>
</ul>
<h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><ul>
<li>元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</li>
<li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li>
<li>创建只有一个元素的元组，需要注意在元素后面添加一个逗号，以区分它是一个元组而不是一个普通的值。</li>
<li>元组也可以使用 + 操作符进行拼接。</li>
</ul>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul>
<li>Python 中的集合（Set）是一种无序、可变的数据类型，用于存储唯一的元素。</li>
<li>集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。</li>
<li>在 Python 中，集合使用大括号 {} 表示，元素之间用逗号 , 分隔。</li>
<li>添加元素：s.add( x )</li>
<li>删除元素：s.remove( x )</li>
<li>计算元素个数：len(s)</li>
<li>清空集合：s.clear()</li>
<li>判断元素是否在集合中：x in s</li>
</ul>
<h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><ul>
<li>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</li>
<li>键(key)必须使用不可变类型。</li>
</ul>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul>
<li>不允许整型数据与字符串类型的数据进行相加</li>
<li>显式类型转换： int(), float(), str()</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li>&#x2F;: 精确除法</li>
<li>&#x2F;&#x2F;: 向下取整除法(若分子或分母中有小数，则得到的是取整的小数)</li>
<li>**: 幂运算</li>
<li>逻辑运算: and、or、not</li>
<li>成员运算符: in、not in</li>
<li>身份运算符: is、is not (判断两个标识符是不是引用自一个对象)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 b 的值</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;3 - a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;3 - a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;4 - a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;4 - a 和 b 有相同的标识&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure>

<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul>
<li>while 循环 (没有 do while 循环)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>for 循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><ul>
<li><p>列表推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表] </span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list]</span><br><span class="line">或者 </span><br><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表 <span class="keyword">if</span> 条件]</span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list <span class="keyword">if</span> condition]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line">new_names = [name.upper()<span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(new_names)</span><br><span class="line">[<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>字典推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection &#125;</span><br><span class="line">或</span><br><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition &#125;</span><br><span class="line"></span><br><span class="line">listdemo = [<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span></span><br><span class="line">newdict = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> listdemo&#125;</span><br><span class="line">newdict</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> &#125;</span><br><span class="line">或</span><br><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional &#125;</span><br><span class="line"></span><br><span class="line">setnew = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line">setnew</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元组推导式（生成器表达式）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> )</span><br><span class="line">或</span><br><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象。</span></span><br><span class="line">a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7faf6ee20a50</span>&gt;  <span class="comment"># 返回的是生成器对象</span></span><br><span class="line"><span class="built_in">tuple</span>(a)       <span class="comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul>
<li><p>迭代器是一个可以记住遍历的位置的对象。</p>
</li>
<li><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
</li>
<li><p>迭代器有两个基本的方法：iter() 和 next()。</p>
</li>
<li><p>字符串，列表或元组对象都可用于创建迭代器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))   <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代器对象可以使用常规for语句进行遍历：</span></span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以使用 next() 函数：</span></span><br><span class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个迭代器: 把一个类作为一个迭代器使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">    x = <span class="variable language_">self</span>.a</span><br><span class="line">    <span class="variable language_">self</span>.a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><ul>
<li>使用了 yield 的函数被称为生成器（generator）。</li>
<li>yield 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。</li>
<li>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</li>
<li>当在生成器函数中使用 yield 语句时，函数的执行将会暂停，并将 yield 后面的表达式作为当前迭代的值返回。</li>
<li>每次调用生成器的 next() 方法或使用 for 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 yield 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</li>
<li>调用一个生成器函数，返回的是一个迭代器对象。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建生成器对象</span></span><br><span class="line">generator = countdown(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过迭代生成器获取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 for 循环迭代生成器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> generator:</span><br><span class="line">    <span class="built_in">print</span>(value)  <span class="comment"># 输出: 2 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="with-关键字"><a href="#with-关键字" class="headerlink" title="with 关键字"></a>with 关键字</h3><ul>
<li><p>with 是 Python 中的一个关键字，用于上下文管理协议（Context Management Protocol）。它简化了资源管理代码，特别是那些需要明确释放或清理的资源（如文件、网络连接、数据库连接等）。</p>
</li>
<li><p>优势：</p>
<ul>
<li>自动资源释放：确保资源在使用后被正确关闭</li>
<li>代码简洁：减少样板代码</li>
<li>异常安全：即使在代码块中发生异常，资源也会被正确释放</li>
<li>可读性强：明确标识资源的作用域</li>
</ul>
</li>
<li><p>基础用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> expression [<span class="keyword">as</span> variable]:</span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line"><span class="comment"># expression 返回一个支持上下文管理协议的对象</span></span><br><span class="line"><span class="comment"># as variable 是可选的，用于将表达式结果赋值给变量</span></span><br><span class="line"><span class="comment"># 代码块执行完毕后，自动调用清理方法</span></span><br></pre></td></tr></table></figure></li>
<li><p>工作原理</p>
<ul>
<li>with 语句背后是 Python 的上下文管理协议，该协议要求对象实现两个方法：<ul>
<li><strong>enter</strong>()：进入上下文时调用，返回值赋给 as 后的变量</li>
<li><strong>exit</strong>()：退出上下文时调用，处理清理工作</li>
</ul>
</li>
</ul>
</li>
<li><p>创建自定义的上下文管理器</p>
<ul>
<li>类实现方式, 可以通过实现 <strong>enter</strong> 和 <strong>exit</strong> 方法创建自定义的上下文管理器：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        <span class="variable language_">self</span>.start = time.time()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        <span class="variable language_">self</span>.end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗时: <span class="subst">&#123;self.end - self.start:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">with</span> Timer() <span class="keyword">as</span> t:</span><br><span class="line">    <span class="comment"># 执行一些耗时操作</span></span><br><span class="line">    <span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure></li>
<li>使用 contextlib 模块, Python 的 contextlib 模块提供了更简单的方式来创建上下文管理器：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;<span class="subst">&#123;name&#125;</span>&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;/<span class="subst">&#123;name&#125;</span>&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">with</span> tag(<span class="string">&quot;h1&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个标题&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li><p>定义函数使用 def 关键字，一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（参数列表）:</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure></li>
<li><p>参数传递</p>
<ul>
<li><p>可更改(mutable)与不可更改(immutable)对象: 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li>不可变类型：变量赋值 a&#x3D;5 后再赋值 a&#x3D;10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li>
<li>可变类型：变量赋值 la&#x3D;[1,2,3,4] 后再赋值 la[2]&#x3D;5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
</li>
<li><p>python 函数的参数传递：</p>
<ul>
<li>不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li>可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
</li>
</ul>
</li>
<li><p>不定长参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *var_args_tuple </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vartuple)</span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="number">70</span></span><br><span class="line">(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还有一种就是参数带两个星号 **基本语法如下：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] **var_args_dict </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加了两个星号 ** 的参数会以字典的形式导入。</span></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h3><ul>
<li>ambda 函数是一种小型、匿名的、内联函数，它可以具有任意数量的参数，但只能有一个表达式。</li>
<li>lambda 语法格式：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arguments: expression</span><br><span class="line"></span><br><span class="line"><span class="keyword">lambda</span>是 Python 的关键字，用于定义 <span class="keyword">lambda</span> 函数。</span><br><span class="line">arguments 是参数列表，可以包含零个或多个参数，但必须在冒号(:)前指定。</span><br><span class="line">expression 是一个表达式，用于计算并返回函数的结果。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul>
<li>装饰器（decorators）是 Python 中的一种高级功能，它允许你动态地修改函数或类的行为。装饰器是一种函数，它接受一个函数作为参数，并返回一个新的函数或修改原来的函数。</li>
<li>装饰器的语法使用 @decorator_name 来应用在函数或方法上。</li>
</ul>
<h4 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h4><ul>
<li>Python 装饰允许在不修改原有函数代码的基础上，动态地增加或修改函数的功能，装饰器本质上是一个接收函数作为输入并返回一个新的包装过后的函数的对象。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_function</span>(<span class="params">original_function</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 这里是在调用原始函数前添加的新功能</span></span><br><span class="line">        before_call_code()</span><br><span class="line">        </span><br><span class="line">        result = original_function(*args, **kwargs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 这里是在调用原始函数后添加的新功能</span></span><br><span class="line">        after_call_code()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器</span></span><br><span class="line"><span class="meta">@decorator_function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target_function</span>(<span class="params">arg1, arg2</span>):</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 原始函数的实现</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul>
<li>类装饰器（Class Decorator）是一种用于动态修改类行为的装饰器，它接收一个类作为参数，并返回一个新的类或修改后的类。</li>
<li>函数形式的类装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_class</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;类装饰器，在调用方法前后打印日志&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Wrapper</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">            <span class="variable language_">self</span>.wrapped = cls(*args, **kwargs)  <span class="comment"># 实例化原始类</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;拦截未定义的属性访问，转发给原始类&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(<span class="variable language_">self</span>.wrapped, name)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;调用 <span class="subst">&#123;cls.__name__&#125;</span>.display() 前&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.wrapped.display()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;调用 <span class="subst">&#123;cls.__name__&#125;</span>.display() 后&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Wrapper  <span class="comment"># 返回包装后的类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@log_class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是 MyClass 的 display 方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.display()</span><br></pre></td></tr></table></figure></li>
<li>类形式的类装饰器（实现 <strong>call</strong> 方法）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonDecorator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;类装饰器，使目标类变成单例模式&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cls</span>):</span><br><span class="line">        <span class="variable language_">self</span>.cls = cls</span><br><span class="line">        <span class="variable language_">self</span>.instance = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;拦截实例化过程，确保只创建一个实例&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.instance = <span class="variable language_">self</span>.cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.instance</span><br><span class="line"></span><br><span class="line"><span class="meta">@SingletonDecorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Database 初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">db1 = Database()</span><br><span class="line">db2 = Database()</span><br><span class="line"><span class="built_in">print</span>(db1 <span class="keyword">is</span> db2)  <span class="comment"># True，说明是同一个实例</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h4><ul>
<li>@staticmethod: 将方法定义为静态方法，不需要实例化类即可调用。</li>
<li>@classmethod: 将方法定义为类方法，第一个参数是类本身（通常命名为 cls）。</li>
<li>@property: 将方法转换为属性，使其可以像属性一样访问。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_method</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is a static method.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This is a class method of <span class="subst">&#123;cls.__name__&#125;</span>.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>._name = value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">MyClass.static_method()</span><br><span class="line">MyClass.class_method()</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li>一个模块只会被导入一次，不管你执行了多少次 import。这样可以防止导入模块被一遍又一遍地执行。</li>
<li>搜索路径<ul>
<li>当前目录。</li>
<li>环境变量 PYTHONPATH 指定的目录。</li>
<li>Python 标准库目录。</li>
<li>.pth 文件中指定的目录。</li>
</ul>
</li>
<li>import 模块名：并没有把直接定义在模块中的函数名称写入到当前符号表里，只是把模块的名字写到了那里, 可以使用模块名称来访问函数.</li>
<li>from … import 语句: 从模块中导入一个指定的部分到当前命名空间中</li>
<li>给模块起别名: 使用 as 关键字为模块或函数起别名</li>
<li>模块除了方法定义，还可以包括可执行的代码。这些代码一般用来初始化这个模块。这些代码只有在第一次被导入时才会被执行。</li>
<li>每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。</li>
<li>包<ul>
<li>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。</li>
<li>目录只有包含一个叫做 <strong>init</strong>.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</li>
<li>最简单的情况，放一个空的 :file:<strong>init</strong>.py就可以了。当然这个文件中也可以包含一些初始化代码.</li>
</ul>
</li>
</ul>
<h3 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    runoob()</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.log&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            read_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> fnf_error:</span><br><span class="line">        <span class="built_in">print</span>(fnf_error)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这句话，无论异常是否发生都会执行。&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义异常<ul>
<li>异常类继承自 Exception 类，可以直接继承，或者间接继承<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">MyError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):  <span class="comment"># 类 Exception 默认的 __init__() 被覆盖。</span></span><br><span class="line">            <span class="variable language_">self</span>.value = value</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">repr</span>(<span class="variable language_">self</span>.value)</span><br><span class="line">   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> MyError(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;My exception occurred, value:&#x27;</span>, e.value)</span><br><span class="line">   </span><br><span class="line">My exception occurred, value: <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> MyError(<span class="string">&#x27;oops!&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">__main__.MyError: <span class="string">&#x27;oops!&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>类有一个名为 <strong>init</strong>() 的特殊方法（构造方法），该方法在类实例化时会自动调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = n</span><br><span class="line">        <span class="variable language_">self</span>.age = a</span><br><span class="line">        <span class="variable language_">self</span>.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(<span class="variable language_">self</span>.name,<span class="variable language_">self</span>.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(<span class="variable language_">self</span>,n,a,w)</span><br><span class="line">        <span class="variable language_">self</span>.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(<span class="variable language_">self</span>.name,<span class="variable language_">self</span>.age,<span class="variable language_">self</span>.grade))</span><br><span class="line"> </span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">3</span>)</span><br><span class="line">s.speak()</span><br></pre></td></tr></table></figure></li>
<li>运算符重载<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">      <span class="variable language_">self</span>.a = a</span><br><span class="line">      <span class="variable language_">self</span>.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (<span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,other</span>):</span><br><span class="line">      <span class="keyword">return</span> Vector(<span class="variable language_">self</span>.a + other.a, <span class="variable language_">self</span>.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h3><ul>
<li>当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    <span class="built_in">print</span>(num) </span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul>
<li>threading 模块<ul>
<li>threading.current_thread(): 返回当前的线程变量。</li>
<li>threading.enumerate(): 返回一个包含正在运行的线程的列表。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>
<li>threading.active_count(): 返回正在运行的线程数量，与 len(threading.enumerate()) 有相同的结果。</li>
<li>threading.Thread(target, args&#x3D;(), kwargs&#x3D;{}, daemon&#x3D;None)：创建Thread类的实例。<ul>
<li>target：线程将要执行的目标函数。</li>
<li>args：目标函数的参数，以元组形式传递。</li>
<li>kwargs：目标函数的关键字参数，以字典形式传递。</li>
<li>daemon：指定线程是否为守护线程。</li>
</ul>
</li>
<li>threading.Thread 类提供了以下方法与属性:<ul>
<li><strong>init</strong>(self, group&#x3D;None, target&#x3D;None, name&#x3D;None, args&#x3D;(), kwargs&#x3D;{}, *, daemon&#x3D;None)：初始化Thread对象。<ul>
<li>group：线程组，暂时未使用，保留为将来的扩展。</li>
<li>target：线程将要执行的目标函数。</li>
<li>name：线程的名称。</li>
<li>args：目标函数的参数，以元组形式传递。</li>
<li>kwargs：目标函数的关键字参数，以字典形式传递。</li>
<li>daemon：指定线程是否为守护线程。</li>
</ul>
</li>
<li>start(self)：启动线程。将调用线程的run()方法。</li>
<li>join(self, timeout&#x3D;None)：等待线程终止。默认情况下，join()会一直阻塞，直到被调用线程终止。如果指定了timeout参数，则最多等待timeout秒。</li>
<li>is_alive(self)：返回线程是否在运行。如果线程已经启动且尚未终止，则返回True，否则返回False。</li>
</ul>
</li>
<li>线程同步: <ul>
<li>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法<ul>
<li>threadLock &#x3D; threading.Lock()</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="json-数据解析"><a href="#json-数据解析" class="headerlink" title="json 数据解析"></a>json 数据解析</h2><ul>
<li>json.dumps(): 对数据进行编码。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># Python 字典类型转换为 JSON 对象</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;no&#x27;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;Runoob&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span> : <span class="string">&#x27;https://www.runoob.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Python 原始数据：&quot;</span>, <span class="built_in">repr</span>(data))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;JSON 对象：&quot;</span>, json_str)</span><br></pre></td></tr></table></figure></li>
<li>json.loads(): 对数据进行解码。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># Python 字典类型转换为 JSON 对象</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;no&#x27;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;Runoob&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span> : <span class="string">&#x27;http://www.runoob.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">json_str = json.dumps(data1)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Python 原始数据：&quot;</span>, <span class="built_in">repr</span>(data1))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;JSON 对象：&quot;</span>, json_str)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将 JSON 对象转换为 Python 字典</span></span><br><span class="line">data2 = json.loads(json_str)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;data2[&#x27;name&#x27;]: &quot;</span>, data2[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;data2[&#x27;url&#x27;]: &quot;</span>, data2[<span class="string">&#x27;url&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li>处理的是文件而不是字符串，你可以使用 json.dump() 和 json.load() 来编码和解码JSON数据。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入 JSON 数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br></pre></td></tr></table></figure></li>
<li>Python 编码为 JSON 类型转换对应表<ul>
<li>dict                                          object</li>
<li>list, tuple                                   array</li>
<li>str                                           string</li>
<li>int, float, int- &amp; float-derived Enums        number</li>
<li>True                                          true</li>
<li>False                                         false</li>
<li>None                                          null</li>
</ul>
</li>
<li>JSON 解码为 Python 类型转换对应表：<ul>
<li>object                                        dict</li>
<li>array                                         list</li>
<li>string                                        str</li>
<li>number (int)                                  int</li>
<li>number (real)                                 float</li>
<li>true                                          True</li>
<li>false                                         False</li>
<li>null                                          None</li>
</ul>
</li>
</ul>
<h2 id="requests-模块"><a href="#requests-模块" class="headerlink" title="requests 模块"></a>requests 模块</h2><ul>
<li>Python requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">x = requests.get(<span class="string">&#x27;https://www.runoob.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次调用 requests 请求之后，会返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头、响应内容等：</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 获取响应状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)  <span class="comment"># 获取响应头</span></span><br><span class="line"><span class="built_in">print</span>(response.content)  <span class="comment"># 获取响应内容</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="queue-模块"><a href="#queue-模块" class="headerlink" title="queue 模块"></a>queue 模块</h2><ul>
<li>queue 模块提供了一个线程安全的队列实现，用于在多线程编程中安全地传递数据。<br>队列是一种先进先出（FIFO）的数据结构，queue 模块提供了多种队列类型，包括 Queue、LifoQueue 和 PriorityQueue，以满足不同的需求。</li>
</ul>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个队列</span></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队列中添加元素</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队列中获取元素</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 3</span></span><br></pre></td></tr></table></figure>
<h3 id="LifoQueue"><a href="#LifoQueue" class="headerlink" title="LifoQueue"></a>LifoQueue</h3><ul>
<li>LifoQueue 是一种后进先出（LIFO）的队列，类似于栈。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 LIFO 队列</span></span><br><span class="line">q = queue.LifoQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队列中添加元素</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队列中获取元素</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><ul>
<li>PriorityQueue 是一种优先级队列，元素按照优先级顺序被取出。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个优先级队列</span></span><br><span class="line">q = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队列中添加元素，元素为元组 (优先级, 数据)</span></span><br><span class="line">q.put((<span class="number">3</span>, <span class="string">&#x27;Low priority&#x27;</span>))</span><br><span class="line">q.put((<span class="number">1</span>, <span class="string">&#x27;High priority&#x27;</span>))</span><br><span class="line">q.put((<span class="number">2</span>, <span class="string">&#x27;Medium priority&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队列中获取元素</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: (1, &#x27;High priority&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: (2, &#x27;Medium priority&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 输出: (3, &#x27;Low priority&#x27;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="logging-模块"><a href="#logging-模块" class="headerlink" title="logging 模块"></a>logging 模块</h2><h3 id="配置日志级别"><a href="#配置日志级别" class="headerlink" title="配置日志级别"></a>配置日志级别</h3><ul>
<li>DEBUG：详细的调试信息，通常用于开发阶段。</li>
<li>INFO：程序正常运行时的信息。</li>
<li>WARNING：表示潜在的问题，但程序仍能正常运行。</li>
<li>ERROR：表示程序中的错误，导致某些功能无法正常工作。</li>
<li>CRITICAL：表示严重的错误，可能导致程序崩溃。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.debug(<span class="string">&quot;这是一条调试信息&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;这是一条普通信息&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;这是一条警告信息&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;这是一条错误信息&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;这是一条严重错误信息&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="日志输出格式"><a href="#日志输出格式" class="headerlink" title="日志输出格式"></a>日志输出格式</h3><ul>
<li>通过 basicConfig 方法自定义日志的输出格式。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>,</span><br><span class="line">    datefmt=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="将日志输出到文件"><a href="#将日志输出到文件" class="headerlink" title="将日志输出到文件"></a>将日志输出到文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>,</span><br><span class="line">    filename=<span class="string">&quot;app.log&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="使用多个日志记录器"><a href="#使用多个日志记录器" class="headerlink" title="使用多个日志记录器"></a>使用多个日志记录器</h4><ul>
<li>在大型项目中，你可能需要为不同的模块或组件创建独立的日志记录器。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;my_logger&quot;</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理器</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">&quot;my_logger.log&quot;</span>)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制台处理器</span></span><br><span class="line">console_handler = logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将处理器添加到日志记录器</span></span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录日志</span></span><br><span class="line">logger.debug(<span class="string">&quot;这是一条调试信息&quot;</span>)  <span class="comment"># file</span></span><br><span class="line">logger.info(<span class="string">&quot;这是一条普通信息&quot;</span>)   <span class="comment"># file and console</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="日志过滤器"><a href="#日志过滤器" class="headerlink" title="日志过滤器"></a>日志过滤器</h4><ul>
<li>通过过滤器来控制哪些日志需要被记录。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFilter</span>(logging.Filter):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">self, record</span>):</span><br><span class="line">        <span class="keyword">return</span> record.levelno == logging.ERROR</span><br><span class="line"></span><br><span class="line">logger.addFilter(MyFilter())</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="日志轮转"><a href="#日志轮转" class="headerlink" title="日志轮转"></a>日志轮转</h4><ul>
<li>当日志文件过大时，可以使用 RotatingFileHandler 或 TimedRotatingFileHandler 实现日志轮转<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">handler = RotatingFileHandler(<span class="string">&quot;app.log&quot;</span>, maxBytes=<span class="number">1024</span>, backupCount=<span class="number">3</span>)</span><br><span class="line">logger.addHandler(handler)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="asyncio-模块"><a href="#asyncio-模块" class="headerlink" title="asyncio 模块"></a>asyncio 模块</h2><ul>
<li>协程是 asyncio 的核心概念之一。它是一个特殊的函数，可以在执行过程中暂停，并在稍后恢复执行。协程通过 async def 关键字定义，并通过 await 关键字暂停执行，等待异步操作完成。</li>
<li>事件循环是 asyncio 的核心组件，负责调度和执行协程。它不断地检查是否有任务需要执行，并在任务完成后调用相应的回调函数。</li>
<li>任务是对协程的封装，表示一个正在执行或将要执行的协程。你可以通过 asyncio.create_task() 函数创建任务，并将其添加到事件循环中。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(say_hello())</span><br><span class="line">    <span class="keyword">await</span> task</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="运行协程"><a href="#运行协程" class="headerlink" title="运行协程"></a>运行协程</h4><ul>
<li>要运行一个协程，你可以使用 asyncio.run() 函数。它会创建一个事件循环，并运行指定的协程。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="并发执行多个任务"><a href="#并发执行多个任务" class="headerlink" title="并发执行多个任务"></a>并发执行多个任务</h4><ul>
<li>使用 asyncio.gather() 函数并发执行多个协程，并等待它们全部完成。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 1 started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 1 finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 2 started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 2 finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(task1(), task2())</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h4><ul>
<li>使用 asyncio.wait_for() 函数为协程设置超时时间。如果协程在指定时间内未完成，将引发 asyncio.TimeoutError 异常。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">long_task</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(long_task(), timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task timed out&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>xv6-riscv学习笔记</title>
    <url>/2024/11/26/xv6-riscv%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="加载系统"><a href="#加载系统" class="headerlink" title="加载系统"></a>加载系统</h1><ul>
<li>kernel.ld 描述可执行程序或库在目标内存中的布局方式。它定义了不同的程序段（如代码段、只读数据段、可读写数据段、未初始化数据段等）应该如何在内存中排列，以及指定了一些特殊符号的值，这些符号可以在程序的其他部分被引用，以了解内存布局的相关信息。</li>
<li>内核text段加载到物理内存0x80000000处;随后是trampoline.S(用户和内核的跳转代码).这两段都是按页对齐的;随后是rodata,data,bss段.</li>
<li>entry.S 为每个核心配置内核栈,然后跳到start处.</li>
<li>start.c 执行一些只允许在机器模式下进行的配置，然后切换到主管模式。</li>
<li>main.c 初始化几个设备和子系统之后，它通过调用userinit 创建第一个进程(initcode)。</li>
</ul>
<h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><ul>
<li>kinit(): 将所有空闲内存添加到freelist.</li>
<li>kvminit(): 设置内核空间pagetable.(除了trampoline 和 kernal stacks外,其他内存是直接映射)</li>
<li>kvminithart(): 内核页表指针存到satp中,开启页表.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>代理</title>
    <url>/2024/11/10/%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="终端使用代理"><a href="#终端使用代理" class="headerlink" title="终端使用代理"></a>终端使用代理</h2><ul>
<li>使用clash等搭建代理后，终端不经设置并不会通过代理，而无论是Windows还是Linux，方法都是加入http_proxy,https_proxy或all_proxy环境变量。</li>
</ul>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><h4 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:7890  <span class="comment"># =后的值可以加双引号，也可以不加</span></span><br><span class="line"><span class="built_in">set</span> https_proxy=http://127.0.0.1:7890 <span class="comment"># 注意这里是设置https的代理，但是我们的代理还是http</span></span><br><span class="line"><span class="built_in">set</span> all_proxy=http://127.0.0.1:7890   <span class="comment"># 这是一次性设置两个，可以不设置这个</span></span><br></pre></td></tr></table></figure>

<h4 id="永久设置"><a href="#永久设置" class="headerlink" title="永久设置"></a>永久设置</h4><ul>
<li>终端启用代理的方法是那三个环境变量，因此永久设置就是手动去设置添加环境变量。</li>
</ul>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="临时设置-1"><a href="#临时设置-1" class="headerlink" title="临时设置"></a>临时设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890  <span class="comment"># =后的值可以加双引号，也可以不加</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 <span class="comment"># 注意这里是设置https的代理，但是我们的代理还是http</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=http://127.0.0.1:7890   <span class="comment"># 这是一次性设置两个，可以不设置这个</span></span><br></pre></td></tr></table></figure>

<h4 id="永久设置-1"><a href="#永久设置-1" class="headerlink" title="永久设置"></a>永久设置</h4><ul>
<li>同样的，永久设置也是是将其写入环境变量，在Linux中是将上述内容添加到<del>&#x2F;.bashrc或</del>&#x2F;.profile的末尾。</li>
</ul>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul>
<li>如果只是git需要使用代理，可以在git设置代理，原理相同:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>如果不想git全局使用代理，那只需要在需要代理的仓库输入去掉–global的命令即可:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>若要取消git的代理设置:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
或<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="wsl使用windows代理"><a href="#wsl使用windows代理" class="headerlink" title="wsl使用windows代理"></a>wsl使用windows代理</h2><p>首先，允许局域网连接代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">host_ip=$(ip route | awk <span class="string">&#x27;/default/ &#123;print $3&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$host_ip</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$host_ip</span>:7890&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>安装Archlinux</title>
    <url>/2024/11/22/%E5%AE%89%E8%A3%85archlinux/</url>
    <content><![CDATA[<h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><h2 id="确定启动模式-UEFI-BIOS"><a href="#确定启动模式-UEFI-BIOS" class="headerlink" title="确定启动模式(UEFI&#x2F;BIOS)"></a>确定启动模式(UEFI&#x2F;BIOS)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置终端字号</span></span><br><span class="line">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果提示目录不存在，就是bios，否则是uefi</span></span><br><span class="line"><span class="built_in">ls</span> /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure>

<h2 id="联网-有线网不需要进行这步"><a href="#联网-有线网不需要进行这步" class="headerlink" title="联网(有线网不需要进行这步)"></a>联网(有线网不需要进行这步)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iwctl   //会进入联网模式</span><br><span class="line">[iwd]# <span class="built_in">help</span>    //可以查看帮助</span><br><span class="line">[iwd]# device list    //列出你的无线设备名称，一般以wlan0命名</span><br><span class="line">[iwd]# station &lt;device&gt; scan    //扫描当前环境下的网络</span><br><span class="line">[iwd]# station &lt;device&gt; get-networks    //会显示你扫描到的所有网络</span><br><span class="line">[iwd]# station &lt;device&gt; connect &lt;network name&gt;</span><br><span class="line">password:输入密码</span><br><span class="line">[iwd]# <span class="built_in">exit</span>    //退出当前模式，回到安装模式</span><br></pre></td></tr></table></figure>

<h2 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系统时间是有必要的，因为下载软件时，服务器会验证系统时间，</span></span><br><span class="line"><span class="comment"># 如果时间不正确，可能出现下载失败的情况。</span></span><br><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line">timedatectl status  <span class="comment"># 查看一下系统时钟状态</span></span><br></pre></td></tr></table></figure>

<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="查看系统磁盘"><a href="#查看系统磁盘" class="headerlink" title="查看系统磁盘"></a>查看系统磁盘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<h3 id="进入图形化分区工具进行分区"><a href="#进入图形化分区工具进行分区" class="headerlink" title="进入图形化分区工具进行分区"></a>进入图形化分区工具进行分区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cfdisk /dev/&lt;硬盘名称&gt;</span><br><span class="line"><span class="comment"># 如果提示你要选MBR还是GPT: UEFI启动选择gpt，BIOS启动选择dos，选中后回车。</span></span><br><span class="line"><span class="comment"># 1. BIOS启动只需要俩个分区,根分区和swap分区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. UEFI启动需要分三个区:</span></span><br><span class="line"><span class="comment">#   1. boot分区，用于存储启动信息，类型为efi system</span></span><br><span class="line"><span class="comment">#   2. swap分区，也就是交换分区，类型为linux swap</span></span><br><span class="line"><span class="comment">#   3. 系统分区，用于安装系统和软件的分区，类型为linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分区操作:</span></span><br><span class="line"><span class="comment"># 1.选中new</span></span><br><span class="line"><span class="comment"># 2.输入分区大小后选中primary回车</span></span><br><span class="line"><span class="comment"># 3.选中type,修改分区类型(根分区是Linux类型，swap分区是Linux swap/Solars类型)</span></span><br><span class="line"><span class="comment"># 4.确认分区无误后选择write 回车，输入yes，选择quit退出图形化分区界面</span></span><br><span class="line"><span class="comment"># 5.命令行输入lsblk，查看分区的初始状态</span></span><br></pre></td></tr></table></figure>

<h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><h4 id="BIOS格式化"><a href="#BIOS格式化" class="headerlink" title="BIOS格式化"></a>BIOS格式化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/&lt;硬盘名称&gt;   <span class="comment"># eg:mkfs.ext4 /dev/sda2 格式化系统分区</span></span><br><span class="line">mkswap /dev/&lt;硬盘名称&gt;  <span class="comment"># 格式化swap分区</span></span><br><span class="line">swapon /dev/&lt;硬盘名称&gt;  <span class="comment"># 激活swap分区</span></span><br></pre></td></tr></table></figure>
<h4 id="UEFI格式化"><a href="#UEFI格式化" class="headerlink" title="UEFI格式化"></a>UEFI格式化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1 <span class="comment"># 格式化boot分区</span></span><br><span class="line">mkswap /dev/sda2  <span class="comment"># 格式化swap分区</span></span><br><span class="line">swapon /dev/sda2  <span class="comment"># 激活swap分区</span></span><br><span class="line">mkfs.ext4 /dev/sda3 <span class="comment"># 格式化系统分区</span></span><br></pre></td></tr></table></figure>

<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><h4 id="BIOS挂载"><a href="#BIOS挂载" class="headerlink" title="BIOS挂载"></a>BIOS挂载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda2 /mnt  <span class="comment"># 将系统分区/dev/sda2挂载到/mnt目录</span></span><br></pre></td></tr></table></figure>
<h4 id="UEFI挂载"><a href="#UEFI挂载" class="headerlink" title="UEFI挂载"></a>UEFI挂载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt  <span class="comment"># 将系统分区/dev/sda3挂载到/mnt目录。</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/boot <span class="comment"># 创建boot分区的挂载点。</span></span><br><span class="line">mount /dev/sda1 /mnt/boot <span class="comment"># 将boot分区/dev/sda1挂载到/mnt/boot目录（需要在/mnt下新建一个boot文件夹）。</span></span><br></pre></td></tr></table></figure>

<h2 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 很重要，不然等到天荒地老</span></span><br><span class="line">vim /etc/pacman.d/mirrorlist  <span class="comment"># 加上一个国内源</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line">pacman -Syy <span class="comment"># 更新一下</span></span><br></pre></td></tr></table></figure>

<h2 id="安装linux"><a href="#安装linux" class="headerlink" title="安装linux"></a>安装linux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware linux-headers</span><br><span class="line">pacstrap /mnt vim bash-completion iwd dhcpcd net-tools openssh man</span><br><span class="line"><span class="comment"># vim 命令行编辑工具</span></span><br><span class="line"><span class="comment"># bash-completion 命令行补全工具</span></span><br><span class="line"><span class="comment"># iwd 无线管理工具</span></span><br><span class="line"><span class="comment"># dhcpcd 有线管理工具</span></span><br><span class="line"><span class="comment"># net-tools 网络工具</span></span><br><span class="line"><span class="comment"># openssh ssh服务</span></span><br><span class="line"><span class="comment"># man 使用手册</span></span><br></pre></td></tr></table></figure>

<h2 id="写入分区表"><a href="#写入分区表" class="headerlink" title="写入分区表"></a>写入分区表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"><span class="built_in">cat</span> /mnt/etc/fstab  <span class="comment"># 检查fstab文件是否正确</span></span><br></pre></td></tr></table></figure>

<h2 id="进入系统进行相关配置"><a href="#进入系统进行相关配置" class="headerlink" title="进入系统进行相关配置"></a>进入系统进行相关配置</h2><h3 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>

<h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>

<h3 id="同步硬件时钟"><a href="#同步硬件时钟" class="headerlink" title="同步硬件时钟"></a>同步硬件时钟</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>

<h3 id="本地化设置"><a href="#本地化设置" class="headerlink" title="本地化设置"></a>本地化设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br><span class="line"><span class="comment"># 找到下面两项，取消注释</span></span><br><span class="line">en_US.UTF-8 UTF-8 <span class="comment"># 英</span></span><br><span class="line">zh_CN.UTF-8 UTF-8 <span class="comment"># 中</span></span><br><span class="line"></span><br><span class="line">locale-gen  <span class="comment"># 生成locale信息</span></span><br><span class="line">locale -a <span class="comment"># 列出所有启用的locale</span></span><br><span class="line"><span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf  <span class="comment"># 设置系统语言</span></span><br><span class="line">locale  <span class="comment"># 查看一下</span></span><br></pre></td></tr></table></figure>

<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname <span class="comment"># 编辑hostname文件，输入主机名（可以自己命名）</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   主机名.localdomain 主机名</span><br></pre></td></tr></table></figure>

<h2 id="安装grub引导"><a href="#安装grub引导" class="headerlink" title="安装grub引导"></a>安装grub引导</h2><h3 id="BIOS-安装-grub-引导程序"><a href="#BIOS-安装-grub-引导程序" class="headerlink" title="BIOS 安装 grub 引导程序"></a>BIOS 安装 grub 引导程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S grub</span><br><span class="line">grub-install /dev/sda <span class="comment"># 安装grub。</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg  <span class="comment"># 生成grub的配置文件。</span></span><br><span class="line"></span><br><span class="line">若报错则执行下面</span><br><span class="line">vim /etc/default/grub</span><br><span class="line">GRUB_DISABLE_OS_PROBER=<span class="literal">false</span>  <span class="comment"># 取消GRUB_DISABLE_OS_PROBER=false注释(让grub识别别的系统)</span></span><br><span class="line"><span class="comment"># 建议修改GRUB_TIMEOUT，加快启动时间</span></span><br><span class="line"></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg  <span class="comment"># 再执行一次</span></span><br></pre></td></tr></table></figure>
<h3 id="UEFI-安装-grub-引导程序"><a href="#UEFI-安装-grub-引导程序" class="headerlink" title="UEFI 安装 grub 引导程序"></a>UEFI 安装 grub 引导程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载grub和efibootmgr软件包</span></span><br><span class="line">pacman -S grub efibootmgr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装grub</span></span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch --recheck</span><br><span class="line"><span class="comment"># --bootloader-id=name  其中 name 可以更改为自己想要的名称，建议简短明确</span></span><br><span class="line"></span><br><span class="line">vim /etc/default/grub</span><br><span class="line">GRUB_DISABLE_OS_PROBER=<span class="literal">false</span>  <span class="comment"># 取消GRUB_DISABLE_OS_PROBER=false注释(让grub识别别的系统)</span></span><br><span class="line"><span class="comment"># 建议修改GRUB_TIMEOUT，加快启动时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成grub的配置文件。</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<ul>
<li>如果出现错误，请回头检查命令是否输入错误或者配置是否出错，安装时的一点错误都可能成为你无法开机的原因或者以后使用时的bug.</li>
</ul>
<h2 id="设置root密码，新建用户"><a href="#设置root密码，新建用户" class="headerlink" title="设置root密码，新建用户"></a>设置root密码，新建用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br><span class="line">useradd -m -G wheel &lt;用户名&gt;</span><br><span class="line">passwd &lt;用户名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入sudo，打开 /etc/sudoers</span></span><br><span class="line">如果EDITOR=vim </span><br><span class="line">执行visudo</span><br><span class="line">找到%wheel ALL=(ALL) ALL 把前面的注释去掉</span><br></pre></td></tr></table></figure>

<h2 id="配置启动项"><a href="#配置启动项" class="headerlink" title="配置启动项"></a>配置启动项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> dhcpcd</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> iwd</span><br></pre></td></tr></table></figure>

<h2 id="安装一些硬件设备"><a href="#安装一些硬件设备" class="headerlink" title="安装一些硬件设备"></a>安装一些硬件设备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CPU编码</span></span><br><span class="line">pacman -S intel-ucode    (intel的cpu装这个)</span><br><span class="line">pacman -S amd-ucode    (amd的cpu装这个)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显卡驱动</span></span><br><span class="line">pacman -S xf86-video-intel（Intel核心显卡驱动，用Intel核显就装，否则不用装）</span><br><span class="line">pacman -S mesa nvidia(-lts) nvidia-settings nvidia-dkms nvidia-utils nvidia-prime（nvidia显卡驱动，用nvidia显卡就装，否则不用装）</span><br><span class="line">pacman -S xf86-video-amdgpu (AMD显卡驱动，用amd显卡的就装)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里举两个例子，我的笔记本，i7-11代，搭配intel核显以及3050显卡，所以安装前两个。我的台式机，e3-1230垃圾CPU，搭配HD6950显卡，所以装第三个。nvidia-dkms 与 nvidia-lts 不兼容，如果装lts驱动的话无需安装dkms 。注意：nvidia驱动的安装与前面选择的内核有关，如果你安装的是linux-lts内核，那么需要将nvidia更换为nvidia-lts，linux-zen不支持nvidia显卡（务必对号入座），如果你选择安装新内核，则需要修改一下ibt=off ，否则无法进入系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  声卡驱动</span></span><br><span class="line">pacman -S pipewire (alsa-utils) pipewire-pulse pipewire-jack pipewire-alsa</span><br></pre></td></tr></table></figure>

<h2 id="使用cn源"><a href="#使用cn源" class="headerlink" title="使用cn源"></a>使用cn源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.conf  # 删除Color前的#号</span><br><span class="line"></span><br><span class="line"># 在/etc/pacman.conf最后添加</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Include = /etc/pacman.d/archlinuxcn</span><br><span class="line"></span><br><span class="line">vim /etc/pacman.d/archlinuxcn # 写入以下源</span><br><span class="line">## OpenTUNA (China CDN) (ipv4, https)</span><br><span class="line">Server = https://opentuna.cn/archlinuxcn/$arch</span><br><span class="line">## 北京外国语大学 (北京) (ipv4, ipv6, http, https)</span><br><span class="line">## Added: 2020-05-18</span><br><span class="line">Server = https://mirrors.bfsu.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 腾讯云 (Global CDN) (ipv4, http, https)</span><br><span class="line">## Added: 2018-11-23</span><br><span class="line">Server = https://mirrors.cloud.tencent.com/archlinuxcn/$arch</span><br><span class="line">## 网易 (China CDN) (ipv4, http, https)</span><br><span class="line">Server = https://mirrors.163.com/archlinux-cn/$arch</span><br><span class="line">## 阿里云 (Global CDN) (ipv4, ipv6, http, https)</span><br><span class="line">## Added: 2020-07-03</span><br><span class="line">Server = https://mirrors.aliyun.com/archlinuxcn/$arch</span><br><span class="line">## 华为云 (Global CDN) (ipv4, http, https)</span><br><span class="line">## Added: 2020-10-31</span><br><span class="line">Server = https://repo.huaweicloud.com/archlinuxcn/$arch</span><br><span class="line">## 清华大学 (北京) (ipv4, ipv6, http, https)</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 中国科学技术大学 (安徽合肥) (ipv4, ipv6, http, https)</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 哈尔滨工业大学 (黑龙江哈尔滨) (ipv4, ipv6, http, https)</span><br><span class="line">## Added: 2021-01-09</span><br><span class="line">Server = https://mirrors.hit.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 浙江大学 (浙江杭州) (ipv4, http, https)</span><br><span class="line">## Added: 2017-06-05</span><br><span class="line">Server = https://mirrors.zju.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 重庆大学 (重庆) (ipv4, ipv6, https)</span><br><span class="line">Server = https://mirrors.cqu.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 重庆邮电大学 (重庆) (ipv4, http, https)</span><br><span class="line">Server = https://mirrors.cqupt.edu.cn/archlinuxcn/$arch</span><br><span class="line">## SJTUG 软件源镜像服务 (上海) (ipv4, ipv6, https)</span><br><span class="line">## Added: 2018-05-21</span><br><span class="line">Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux-cn/$arch</span><br><span class="line">## 南京大学 (江苏南京) (ipv4, ipv6, http, https)</span><br><span class="line">Server = https://mirrors.nju.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 莞工 GNU/Linux 协会 开源软件镜像站 (广东东莞) (ipv4, https)</span><br><span class="line">## Added: 2018-11-03</span><br><span class="line">Server = https://mirrors.dgut.edu.cn/archlinuxcn/$arch</span><br><span class="line">## 南方科技大学 (广东深圳) (ipv4, ipv6, http, https)</span><br><span class="line">## Added: 2021-08-17</span><br><span class="line">Server = https://mirrors.sustech.edu.cn/archlinuxcn/$arch</span><br><span class="line"></span><br><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 想简单点就直接在/etc/pacman.conf最后添加</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> pacman -Syy</span><br><span class="line"><span class="built_in">sudo</span> pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<h2 id="使用aur"><a href="#使用aur" class="headerlink" title="使用aur"></a>使用aur</h2><h3 id="paru"><a href="#paru" class="headerlink" title="paru"></a>paru</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://aur.archlinux.org/paru.git</span><br><span class="line">$ <span class="built_in">cd</span> paru</span><br><span class="line">$ makepkg -si</span><br><span class="line"></span><br><span class="line">注：archlinuxcn源中有paru，直接<span class="built_in">sudo</span> pacman -S paru</span><br><span class="line"></span><br><span class="line">$ paru  <span class="comment"># 约等于 sudo pacman -S Syyu 对软件进行更新并升级</span></span><br><span class="line">$ paru  包名</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/paru.conf</span><br><span class="line">取消BottomUp的注释  <span class="comment"># 使最常用的软件显示在下方</span></span><br></pre></td></tr></table></figure>

<h2 id="退出系统重启"><a href="#退出系统重启" class="headerlink" title="退出系统重启"></a>退出系统重启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h1><h2 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S xorg xorg-server xorg-xinit xorg-xrandr</span><br><span class="line"><span class="built_in">sudo</span> pacman -S feh  <span class="comment"># 壁纸</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S udisks2 udiskie  <span class="comment"># U盘</span></span><br><span class="line">xrandr  <span class="comment"># 查看有哪些显示器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrcS</span><br><span class="line">vim ~/.xinitrc  <span class="comment"># 删除最后几行没用的，添加以下几行</span></span><br><span class="line">fcitx5 &amp;  <span class="comment"># 开启中文输入法且后台运行</span></span><br><span class="line">xrandr --output Virtual-1(显示器名称) --mode 1920x1080 --rate 60.00(显示器配置)</span><br><span class="line">feh --bg-fill --randomize /usr/share/backgrouds/archlinux/* <span class="comment"># 先设置分辨率再设置壁纸</span></span><br><span class="line">picom -b &amp;</span><br><span class="line"><span class="built_in">exec</span> slstatus &amp;</span><br><span class="line">末行添加 <span class="built_in">exec</span> dwm</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> udisk2 <span class="comment"># 识别U盘</span></span><br><span class="line">startx  <span class="comment"># 进入dwm</span></span><br><span class="line"></span><br><span class="line">ctrl+<span class="built_in">shift</span>+pageup <span class="comment"># 放大字体</span></span><br><span class="line">xrandr -q <span class="comment"># 查看显示器设置</span></span><br><span class="line">xrandr --output Virtual-1(显示器名称) --mode 1920x1080 --rate 60.00(显示器配置)</span><br></pre></td></tr></table></figure>

<h2 id="电池优化"><a href="#电池优化" class="headerlink" title="电池优化"></a>电池优化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S tlp tlp-rdw tlpui                                       <span class="comment">## 安装电源管理及图形界面</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/tlp.conf                                         <span class="comment">## 编辑配置文件，防止Btrfs文件系统损坏</span></span><br><span class="line">SATA_LINKPWR_ON_BAT=max_performance                            <span class="comment">## 更改内容为</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> tlp.service                               <span class="comment">## 设置tlp服务开机自启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> NetworkManager-dispatcher.service        <span class="comment">## 设置开机自启动</span></span><br><span class="line"><span class="built_in">sudo</span> syatemctl mask systemd-rfkill.service                     <span class="comment">## 屏蔽服务，防止冲突</span></span><br><span class="line"><span class="built_in">sudo</span> syatemctl mask systemd-rfkill.socket                      <span class="comment">## 屏蔽,防止冲突</span></span><br><span class="line"><span class="built_in">sudo</span> tlp start                                                 <span class="comment">## 启动服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用TLP显示系统信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -b                                               <span class="comment">## 显示电池信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -d                                               <span class="comment">## 显示磁盘信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -e                                               <span class="comment">## 显示 PCI 设备信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -g                                               <span class="comment">## 显示 GPU 信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -p                                               <span class="comment">## 显示 CPU 信息</span></span><br><span class="line"><span class="built_in">sudo</span> tlp-stat -s                                               <span class="comment">## 显示系统数据信息</span></span><br></pre></td></tr></table></figure>

<h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S alsa-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看有几个声卡设备</span></span><br><span class="line"><span class="built_in">cat</span> /proc/asound/cards</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看声卡的card number和device number</span></span><br><span class="line">aplay -h      <span class="comment"># 查看帮助</span></span><br><span class="line">aplay -l      <span class="comment"># 列出所有的声卡和数字音频设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认声卡</span></span><br><span class="line"><span class="comment"># nvim /etc/asound.conf</span></span><br><span class="line">defaults.pcm.card 1</span><br><span class="line">defaults.pcm.device 0</span><br><span class="line">defaults.ctl.card 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启声音</span></span><br><span class="line">amixer sset Master toggle <span class="comment"># 交换开启状态</span></span><br><span class="line">amixer sset Master Capture  <span class="comment"># 交换开启状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动静音</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">amixer -h       <span class="comment"># 查看帮助</span></span><br><span class="line">amixer sset Master unmute</span><br><span class="line">amixer sset Speaker unmute</span><br><span class="line">amixer sset Headphone unmute</span><br><span class="line">amixer <span class="built_in">set</span> Master 10%+    <span class="comment"># Master增加10%的音量</span></span><br><span class="line">amixer <span class="built_in">set</span> Master 10%-    <span class="comment"># Master减少10%的音量</span></span><br><span class="line">amixer <span class="built_in">set</span> Master 70%     <span class="comment"># Master音量设定为70%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 播放音频</span></span><br><span class="line">aplay -D hw:1,0 /usr/share/sounds/test.wav        <span class="comment"># hw后的的数字分别代表卡号和设备号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在终端中输入alsamixer打开设置</span></span><br><span class="line">在 alsamixer 中，下方标有 MM 的声道是静音的，而标有 00 的通道已经启用。  </span><br><span class="line">使用 ← 和 → 方向键，选中 Master 和 PCM 声道。按下 m 键解除静音。使用 ↑ 方向键增加音量，直到增益值为0。该值显示在左上方 Item: 字段后。过高的增益值会导致声音失真。</span><br></pre></td></tr></table></figure>

<h2 id="背光"><a href="#背光" class="headerlink" title="背光"></a>背光</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S light</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG video &lt;user&gt;</span><br><span class="line">light -U 10 <span class="comment"># 屏幕亮度降低10%</span></span><br><span class="line">light -A 10 <span class="comment"># 屏幕亮度升高10%</span></span><br><span class="line">light -G    <span class="comment"># 得到当前亮度</span></span><br></pre></td></tr></table></figure>

<h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// blueman更方便</span><br><span class="line"><span class="built_in">sudo</span> bluetooth on <span class="comment"># 手动启动蓝牙</span></span><br><span class="line"><span class="built_in">sudo</span> bluetooth off  <span class="comment"># 手动关闭蓝牙</span></span><br><span class="line"><span class="built_in">sudo</span> bluetooth toggle <span class="comment"># 手动切换蓝牙状态</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> pacman -S pulseaudio-bluetooth pavucontrol <span class="comment"># 安装蓝牙音频</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S bluez bluez-utils</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> bluetooth.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl start bluetooth.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Bluetoothctl进入蓝牙控制台</span></span><br><span class="line">$ bluetoothctl --<span class="built_in">help</span>          查看帮助命令</span><br><span class="line">$ bluetoothctl -v              查看蓝牙版本</span><br><span class="line">$ bluetoothctl            进入蓝牙管理工具环境</span><br><span class="line">[bluetooth]# power on                打开蓝牙</span><br><span class="line">[bluetooth]# agent on                开启代理</span><br><span class="line">[bluetooth]# scan on                 扫描蓝牙设备</span><br><span class="line">[bluetooth]# pair xx:xx:xx:...       配对该设备</span><br><span class="line">[bluetooth]# trust xx:xx:xx:...      信任该设备</span><br><span class="line">[bluetooth]# connect xx:xx:...       连接该设备</span><br><span class="line">[bluetooth]# disconnect xx:xx:...    断开蓝牙</span><br><span class="line">[bluetooth]# <span class="built_in">help</span>                   查看帮助信息</span><br><span class="line">[bluetooth]# show                   查看本机蓝牙信息</span><br><span class="line">[bluetooth]# discoverable <span class="built_in">yes</span>       设置蓝牙可被发现</span><br><span class="line">[bluetooth]# info xx:xx:xx:...      查看该蓝牙设备的信息</span><br><span class="line"></span><br><span class="line">pulseaudio -k  或者 <span class="built_in">sudo</span>  killall pulseaudio                 <span class="comment"># 确保没有pulseaudio启动</span></span><br><span class="line">pulseaudio --start              <span class="comment"># 启动pulseaudio服务</span></span><br><span class="line">pavucontrol <span class="comment"># 管理声音输出</span></span><br></pre></td></tr></table></figure>

<h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S libinput xf86-input-libinput</span><br><span class="line"></span><br><span class="line">libinput配置文件位置</span><br><span class="line">1.libinput默认的配置文件在/usr/share/X11/xorg.conf.d/40-libinput.conf，可以设置鼠标加速、额外的鼠标按键、触控板、触控屏等。</span><br><span class="line">2.由于同一个设备的不同驱动程序可以共存，如果你打算为一个设备使用 libinput 驱动，请确保它在其他驱动中 /etc/X11/xorg.conf.d/ 拥有优先级。</span><br><span class="line">举个栗子：</span><br><span class="line">如果你同时安装了 libinput 和 synaptics 并使用其默认配置（即 /etc/X11/xorg.conf.d/ 中没有属于两者中任一的文件），synaptics 将因其在默认安装目录中拥有更高的数字顺序 70- 而获得优先级。为了避免这种情况，您可以将默认的 libinput 配置文件（40-libinput.conf）软链接到目录搜索顺序优先于 70-synaptics.conf 的 /etc/X11/xorg.conf.d/ 中去取代它。</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/X11/xorg.conf.d/40-libinput.conf /etc/X11/xorg.conf.d/40-libinput.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改libinput配置</span></span><br><span class="line"><span class="comment"># vim /etc/X11/xorg.conf.d/40-libinput.conf</span></span><br><span class="line">MatchIsPointer “on” <span class="comment"># 小红点</span></span><br><span class="line">MatchIsKeyboard “on” <span class="comment"># 软键盘</span></span><br><span class="line">MatchIsTouchpad “on” <span class="comment"># 触控板</span></span><br><span class="line">MatchIsTouchscreen “on” <span class="comment"># 触控屏</span></span><br><span class="line"></span><br><span class="line">常用选项</span><br><span class="line">1.当检测到 USB 鼠标时，它将禁用触摸板。</span><br><span class="line">Option <span class="string">&quot;SendEventsMode&quot;</span> <span class="string">&quot;disabled-on-external-mouse&quot;</span></span><br><span class="line">2.允许单指和双指触击分别调用鼠标左右键，而不用按触控板的物理按键</span><br><span class="line">Option <span class="string">&quot;Tapping&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">3.防止打字时误触触控板</span><br><span class="line">Option <span class="string">&quot;DisableWhileTyping&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">4.触摸板不再拥有区域的区分，与之代替的是双指代表右键，三指代表中键。</span><br><span class="line">Option <span class="string">&quot;ClickMethod&quot;</span> <span class="string">&quot;clickfinger&quot;</span></span><br><span class="line">5.轻击后手指按住会使单个按钮关闭，此手指的所有动作都将转换为拖动动作。</span><br><span class="line">Option <span class="string">&quot;TappingDrag&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">6.自然滚动（反方向滚动）</span><br><span class="line">Option <span class="string">&quot;NaturalScrolling&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">7.启用鼠标加速配置文件。这有助于使鼠标手指的速度更自然一些，迟钝感更小。建议使用 Adaptive，因为其会根据您的输入更改。您也可以尝试“flat”选项。</span><br><span class="line">Option <span class="string">&quot;AccelProfile&quot;</span> <span class="string">&quot;adaptive&quot;</span></span><br><span class="line">8.更改鼠标指针的加速速度。使用 -1 到 1 之间的值。数值越大，指针移动的速度越高。大多数人倾向于使用 0.2 以获得较慢的响应速度，使用 0.5 获得较快的响应速度。</span><br><span class="line">Option <span class="string">&quot;AccelSpeed&quot;</span> <span class="string">&quot;0.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://wiki.archlinuxcn.org/wiki/Touchpad_Synaptics?rdfrom=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%3Ftitle%3DTouchpad_Synaptics_%28%25E7%25AE%2580%25E4%25BD%2593%25E4%25B8%25AD%25E6%2596%2587%29%26redirect%3Dno</span></span><br><span class="line">9.在synaptics上启用自然滚动(触摸屏那种滚动).只要将VertScrollDelta和HorizScrollDelta的值设定为负就行(翻转滚动方向):</span><br><span class="line">Option      <span class="string">&quot;VertScrollDelta&quot;</span>          <span class="string">&quot;-111&quot;</span></span><br><span class="line">Option      <span class="string">&quot;HorizScrollDelta&quot;</span>         <span class="string">&quot;-111&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例：</span></span><br><span class="line">Section <span class="string">&quot;InputClass&quot;</span></span><br><span class="line">        Identifier <span class="string">&quot;touchpad&quot;</span></span><br><span class="line">        MatchIsTouchpad <span class="string">&quot;on&quot;</span></span><br><span class="line">        MatchDevicePath <span class="string">&quot;/dev/input/event*&quot;</span></span><br><span class="line">        Driver <span class="string">&quot;libinput&quot;</span></span><br><span class="line">        Option <span class="string">&quot;Tapping&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">        Option <span class="string">&quot;TappingButtonMap&quot;</span> <span class="string">&quot;lrm&quot;</span></span><br><span class="line">        Option <span class="string">&quot;DisableWhileTyping&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">        Option <span class="string">&quot;TappingDrag&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">        Option <span class="string">&quot;NaturalScrolling&quot;</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">        Option <span class="string">&quot;SendEventsMode&quot;</span> <span class="string">&quot;disabled-on-external-mouse&quot;</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>

<h1 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h1><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装fcitx5</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-material-color</span><br><span class="line"><span class="comment"># 有些应用仍然不能使用中文，去archwiki搜fcitx5查看解决方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nerd fond</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S ttf-jetbrains-mono-nerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英文</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S ttf-dehavu ttf-droid ttf-font-awesome otf-font-awesome ttf-liberation ttf-linux-libertine ttf-opensans ttf-roboto ttf-ubuntu-font-family</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S ttf-hannom noto-fonts noto-fonts-extra noto-fonts-emoji noto-fonts-cjk adobe-source-code-pro-fonts adobe-source-sans-fonts adobe-source-serif-fonts adobe-source-han-sans-cn-fonts adobe-source-han-sans-hk-fonts adobe-source-han-sans-tw-fonts adobe-source-han-serif-cn-fonts wqy-cn-fonts wqy-microhei</span><br></pre></td></tr></table></figure>

<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells  <span class="comment"># 查看zsh的具体地址</span></span><br><span class="line">chsh -s path     <span class="comment"># zsh的详细路径</span></span><br></pre></td></tr></table></figure>

<h2 id="wps"><a href="#wps" class="headerlink" title="wps"></a>wps</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru wps-office-cn wps-office-mui-zh-cn ttf-wps-fonts</span><br><span class="line">$ 解决粗体黑块</span><br><span class="line">paru freetype2-wps</span><br></pre></td></tr></table></figure>

<h2 id="software"><a href="#software" class="headerlink" title="software"></a>software</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S unzip git neovim tmux joshuto python xclip</span><br><span class="line">paru iwgtk  <span class="comment"># iwctl的图形界面</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S capnet-assist <span class="comment"># 有些网络需要网页登陆</span></span><br><span class="line">paru google-chrome</span><br><span class="line"><span class="built_in">sudo</span> pacman -S clash-verge-rev</span><br><span class="line"><span class="built_in">sudo</span> pacman -S scrot  <span class="comment"># 截图</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S flameshot  <span class="comment"># 截图</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S sioyek <span class="comment"># pdf</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S rofi <span class="comment"># dmenu </span></span><br><span class="line"><span class="comment"># rofi -dump-config &gt; ~/.config/rofi/config.rasi</span></span><br><span class="line"><span class="comment"># rofi options  -theme ~/.config/rofi/powermenu/style.rasi -show drun</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>部署Hexo博客</title>
    <url>/2024/11/10/%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><h2 id="install-nodejs"><a href="#install-nodejs" class="headerlink" title="install nodejs"></a>install nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">node -v <span class="comment">#查看node版本</span></span><br><span class="line">npm -v <span class="comment">#查看npm版本</span></span><br><span class="line"><span class="built_in">sudo</span> npm install -g cnpm --registry=http://registry.npm.taobao.org <span class="comment">#安装淘宝的cnpm 管理器</span></span><br><span class="line">cnpm -v <span class="comment">#查看cnpm版本</span></span><br></pre></td></tr></table></figure>

<h2 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> cnpm install -g hexo-cli <span class="comment">#安装hexo框架</span></span><br><span class="line">hexo -v <span class="comment">#查看hexo版本</span></span><br></pre></td></tr></table></figure>

<h2 id="create-blog"><a href="#create-blog" class="headerlink" title="create blog"></a>create blog</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules https://gitee.com/name/blog <span class="comment"># 下载blog文件 (直接从自己仓库拉)</span></span><br><span class="line">cnpm install <span class="comment"># 安装 node modules</span></span><br><span class="line">cnpm install hexo-hide-posts <span class="comment"># 安装隐藏文章的插件</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><h2 id="new-file"><a href="#new-file" class="headerlink" title="new file"></a>new file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;file name&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo提供了三种默认布局：post（文章）、draft（草稿）、page（页面）</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 指定布局类型为page</span></span><br><span class="line">hexo new page <span class="string">&quot;我的页面&quot;</span></span><br><span class="line"><span class="comment"># 不指定布局类型</span></span><br><span class="line">hexo new <span class="string">&quot;我的文章&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="front-matter"><a href="#front-matter" class="headerlink" title="front-matter"></a>front-matter</h2><ul>
<li>用—包围起来并置于文件头部的内容称为Front-matter，用于指定MD文件的变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 个人博客</span><br><span class="line">- Hexo博客</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">- 博客</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它的标签就是：Hexo、博客</span></span><br><span class="line"><span class="comment"># 它的分类就是：个人博客 &gt; Hexo博客（”Hexo博客“是“个人博客”的子分类）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [日常, 生活]</span><br><span class="line">- [日常, 随想]</span><br><span class="line">- [日记]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记</span></span><br><span class="line"><span class="comment"># 其中生活、随想为日常的子分类，日常和日记为同级分类</span></span><br></pre></td></tr></table></figure>

<h2 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存文件db.json和已生成的静态文件public</span></span><br><span class="line">hexo generate/hexo g <span class="comment"># Hexo会解析Markdown以及相关文件来生成网页</span></span><br><span class="line">hexo server/hexo s <span class="comment"># 启动服务器</span></span><br><span class="line">hexo deploy/hexo d <span class="comment"># 用于将网站更新到服务器上,需要将博客托管到服务器才能用此命令</span></span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment"># 网站更新到服务器：清除缓存&gt;生成静态文件&gt;启动服务，测试没问题后再执行部署命令</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
